
C:\Users\Pavel\AppData\Local\Temp\arduino_build_461464/diychainsaw.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	f5 c3       	rjmp	.+2026   	; 0x7ec <__ctors_end>
       2:	19 c4       	rjmp	.+2098   	; 0x836 <__bad_interrupt>
       4:	18 c4       	rjmp	.+2096   	; 0x836 <__bad_interrupt>
       6:	4f c7       	rjmp	.+3742   	; 0xea6 <__vector_3>
       8:	16 c4       	rjmp	.+2092   	; 0x836 <__bad_interrupt>
       a:	ee c6       	rjmp	.+3548   	; 0xde8 <__vector_5>
       c:	14 c4       	rjmp	.+2088   	; 0x836 <__bad_interrupt>
       e:	13 c4       	rjmp	.+2086   	; 0x836 <__bad_interrupt>
      10:	12 c4       	rjmp	.+2084   	; 0x836 <__bad_interrupt>
      12:	34 c7       	rjmp	.+3688   	; 0xe7c <__vector_9>
      14:	10 c4       	rjmp	.+2080   	; 0x836 <__bad_interrupt>
      16:	0f c4       	rjmp	.+2078   	; 0x836 <__bad_interrupt>
      18:	0e c4       	rjmp	.+2076   	; 0x836 <__bad_interrupt>
      1a:	0d c4       	rjmp	.+2074   	; 0x836 <__bad_interrupt>
      1c:	0c c4       	rjmp	.+2072   	; 0x836 <__bad_interrupt>

0000001e <__trampolines_end>:
	...
__trampolines_start():
      2e:	00 00       	nop
      30:	00 f8       	bld	r0, 0
      32:	00 00       	nop
      34:	00 00       	nop
      36:	00 00       	nop
      38:	00 33       	cpi	r16, 0x30	; 48
      3a:	30 00       	.word	0x0030	; ????
      3c:	00 00       	nop
      3e:	00 10       	cpse	r0, r0
      40:	0c 06       	cpc	r0, r28
      42:	10 0c       	add	r1, r0
      44:	06 00       	.word	0x0006	; ????
	...
      4e:	40 c0       	rjmp	.+128    	; 0xd0 <__SREG__+0x91>
      50:	78 40       	sbci	r23, 0x08	; 8
      52:	c0 78       	andi	r28, 0x80	; 128
      54:	40 00       	.word	0x0040	; ????
      56:	04 3f       	cpi	r16, 0xF4	; 244
      58:	04 04       	cpc	r0, r4
      5a:	3f 04       	cpc	r3, r15
      5c:	04 00       	.word	0x0004	; ????
      5e:	00 70       	andi	r16, 0x00	; 0
      60:	88 fc       	.word	0xfc88	; ????
      62:	08 30       	cpi	r16, 0x08	; 8
      64:	00 00       	nop
      66:	00 18       	sub	r0, r0
      68:	20 ff       	sbrs	r18, 0
      6a:	21 1e       	adc	r2, r17
      6c:	00 00       	nop
      6e:	f0 08       	sbc	r15, r0
      70:	f0 00       	.word	0x00f0	; ????
      72:	e0 18       	sub	r14, r0
      74:	00 00       	nop
      76:	00 21       	and	r16, r0
      78:	1c 03       	fmul	r17, r20
      7a:	1e 21       	and	r17, r14
      7c:	1e 00       	.word	0x001e	; ????
      7e:	00 f0       	brcs	.+0      	; 0x80 <__SREG__+0x41>
      80:	08 88       	ldd	r0, Y+16	; 0x10
      82:	70 00       	.word	0x0070	; ????
      84:	00 00       	nop
      86:	1e 21       	and	r17, r14
      88:	23 24       	eor	r2, r3
      8a:	19 27       	eor	r17, r25
      8c:	21 10       	cpse	r2, r1
      8e:	10 16       	cp	r1, r16
      90:	0e 00       	.word	0x000e	; ????
	...
      9e:	00 00       	nop
      a0:	00 e0       	ldi	r16, 0x00	; 0
      a2:	18 04       	cpc	r1, r8
      a4:	02 00       	.word	0x0002	; ????
      a6:	00 00       	nop
      a8:	00 07       	cpc	r16, r16
      aa:	18 20       	and	r1, r8
      ac:	40 00       	.word	0x0040	; ????
      ae:	00 02       	muls	r16, r16
      b0:	04 18       	sub	r0, r4
      b2:	e0 00       	.word	0x00e0	; ????
      b4:	00 00       	nop
      b6:	00 40       	sbci	r16, 0x00	; 0
      b8:	20 18       	sub	r2, r0
      ba:	07 00       	.word	0x0007	; ????
      bc:	00 00       	nop
      be:	40 40       	sbci	r20, 0x00	; 0
      c0:	80 f0       	brcs	.+32     	; 0xe2 <__SREG__+0xa3>
      c2:	80 40       	sbci	r24, 0x00	; 0
      c4:	40 00       	.word	0x0040	; ????
      c6:	02 02       	muls	r16, r18
      c8:	01 0f       	add	r16, r17
      ca:	01 02       	muls	r16, r17
      cc:	02 00       	.word	0x0002	; ????
      ce:	00 00       	nop
      d0:	00 f0       	brcs	.+0      	; 0xd2 <__SREG__+0x93>
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	01 01       	movw	r0, r2
      d8:	01 1f       	adc	r16, r17
      da:	01 01       	movw	r0, r2
      dc:	01 00       	.word	0x0001	; ????
	...
      e6:	80 b0       	in	r8, 0x00	; 0
      e8:	70 00       	.word	0x0070	; ????
	...
      f6:	00 01       	movw	r0, r0
      f8:	01 01       	movw	r0, r2
      fa:	01 01       	movw	r0, r2
      fc:	01 01       	movw	r0, r2
	...
     106:	00 30       	cpi	r16, 0x00	; 0
     108:	30 00       	.word	0x0030	; ????
	...
     112:	80 60       	ori	r24, 0x00	; 0
     114:	18 04       	cpc	r1, r8
     116:	00 60       	ori	r16, 0x00	; 0
     118:	18 06       	cpc	r1, r24
     11a:	01 00       	.word	0x0001	; ????
     11c:	00 00       	nop
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	10 08       	sbc	r1, r0
     122:	08 10       	cpse	r0, r8
     124:	e0 00       	.word	0x00e0	; ????
     126:	00 0f       	add	r16, r16
     128:	10 20       	and	r1, r0
     12a:	20 10       	cpse	r2, r0
     12c:	0f 00       	.word	0x000f	; ????
     12e:	00 10       	cpse	r0, r0
     130:	10 f8       	bld	r1, 0
     132:	00 00       	nop
     134:	00 00       	nop
     136:	00 20       	and	r0, r0
     138:	20 3f       	cpi	r18, 0xF0	; 240
     13a:	20 20       	and	r2, r0
     13c:	00 00       	nop
     13e:	00 70       	andi	r16, 0x00	; 0
     140:	08 08       	sbc	r0, r8
     142:	08 88       	ldd	r0, Y+16	; 0x10
     144:	70 00       	.word	0x0070	; ????
     146:	00 30       	cpi	r16, 0x00	; 0
     148:	28 24       	eor	r2, r8
     14a:	22 21       	and	r18, r2
     14c:	30 00       	.word	0x0030	; ????
     14e:	00 30       	cpi	r16, 0x00	; 0
     150:	08 88       	ldd	r0, Y+16	; 0x10
     152:	88 48       	sbci	r24, 0x88	; 136
     154:	30 00       	.word	0x0030	; ????
     156:	00 18       	sub	r0, r0
     158:	20 20       	and	r2, r0
     15a:	20 11       	cpse	r18, r0
     15c:	0e 00       	.word	0x000e	; ????
     15e:	00 00       	nop
     160:	c0 20       	and	r12, r0
     162:	10 f8       	bld	r1, 0
     164:	00 00       	nop
     166:	00 07       	cpc	r16, r16
     168:	04 24       	eor	r0, r4
     16a:	24 3f       	cpi	r18, 0xF4	; 244
     16c:	24 00       	.word	0x0024	; ????
     16e:	00 f8       	bld	r0, 0
     170:	08 88       	ldd	r0, Y+16	; 0x10
     172:	88 08       	sbc	r8, r8
     174:	08 00       	.word	0x0008	; ????
     176:	00 19       	sub	r16, r0
     178:	21 20       	and	r2, r1
     17a:	20 11       	cpse	r18, r0
     17c:	0e 00       	.word	0x000e	; ????
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	10 88       	ldd	r1, Z+16	; 0x10
     182:	88 18       	sub	r8, r8
     184:	00 00       	nop
     186:	00 0f       	add	r16, r16
     188:	11 20       	and	r1, r1
     18a:	20 11       	cpse	r18, r0
     18c:	0e 00       	.word	0x000e	; ????
     18e:	00 38       	cpi	r16, 0x80	; 128
     190:	08 08       	sbc	r0, r8
     192:	c8 38       	cpi	r28, 0x88	; 136
     194:	08 00       	.word	0x0008	; ????
     196:	00 00       	nop
     198:	00 3f       	cpi	r16, 0xF0	; 240
     19a:	00 00       	nop
     19c:	00 00       	nop
     19e:	00 70       	andi	r16, 0x00	; 0
     1a0:	88 08       	sbc	r8, r8
     1a2:	08 88       	ldd	r0, Y+16	; 0x10
     1a4:	70 00       	.word	0x0070	; ????
     1a6:	00 1c       	adc	r0, r0
     1a8:	22 21       	and	r18, r2
     1aa:	21 22       	and	r2, r17
     1ac:	1c 00       	.word	0x001c	; ????
     1ae:	00 e0       	ldi	r16, 0x00	; 0
     1b0:	10 08       	sbc	r1, r0
     1b2:	08 10       	cpse	r0, r8
     1b4:	e0 00       	.word	0x00e0	; ????
     1b6:	00 00       	nop
     1b8:	31 22       	and	r3, r17
     1ba:	22 11       	cpse	r18, r2
     1bc:	0f 00       	.word	0x000f	; ????
     1be:	00 00       	nop
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <__SREG__+0x183>
     1c2:	c0 00       	.word	0x00c0	; ????
     1c4:	00 00       	nop
     1c6:	00 00       	nop
     1c8:	00 30       	cpi	r16, 0x00	; 0
     1ca:	30 00       	.word	0x0030	; ????
     1cc:	00 00       	nop
     1ce:	00 00       	nop
     1d0:	00 80       	ld	r0, Z
     1d2:	00 00       	nop
     1d4:	00 00       	nop
     1d6:	00 00       	nop
     1d8:	80 60       	ori	r24, 0x00	; 0
     1da:	00 00       	nop
     1dc:	00 00       	nop
     1de:	00 00       	nop
     1e0:	80 40       	sbci	r24, 0x00	; 0
     1e2:	20 10       	cpse	r2, r0
     1e4:	08 00       	.word	0x0008	; ????
     1e6:	00 01       	movw	r0, r0
     1e8:	02 04       	cpc	r0, r2
     1ea:	08 10       	cpse	r0, r8
     1ec:	20 00       	.word	0x0020	; ????
     1ee:	40 40       	sbci	r20, 0x00	; 0
     1f0:	40 40       	sbci	r20, 0x00	; 0
     1f2:	40 40       	sbci	r20, 0x00	; 0
     1f4:	40 00       	.word	0x0040	; ????
     1f6:	04 04       	cpc	r0, r4
     1f8:	04 04       	cpc	r0, r4
     1fa:	04 04       	cpc	r0, r4
     1fc:	04 00       	.word	0x0004	; ????
     1fe:	00 08       	sbc	r0, r0
     200:	10 20       	and	r1, r0
     202:	40 80       	ld	r4, Z
     204:	00 00       	nop
     206:	00 20       	and	r0, r0
     208:	10 08       	sbc	r1, r0
     20a:	04 02       	muls	r16, r20
     20c:	01 00       	.word	0x0001	; ????
     20e:	00 70       	andi	r16, 0x00	; 0
     210:	48 08       	sbc	r4, r8
     212:	08 08       	sbc	r0, r8
     214:	f0 00       	.word	0x00f0	; ????
     216:	00 00       	nop
     218:	00 30       	cpi	r16, 0x00	; 0
     21a:	36 01       	movw	r6, r12
     21c:	00 00       	nop
     21e:	c0 30       	cpi	r28, 0x00	; 0
     220:	c8 28       	or	r12, r8
     222:	e8 10       	cpse	r14, r8
     224:	e0 00       	.word	0x00e0	; ????
     226:	07 18       	sub	r0, r7
     228:	27 24       	eor	r2, r7
     22a:	23 14       	cp	r2, r3
     22c:	0b 00       	.word	0x000b	; ????
     22e:	00 00       	nop
     230:	c0 38       	cpi	r28, 0x80	; 128
     232:	e0 00       	.word	0x00e0	; ????
     234:	00 00       	nop
     236:	20 3c       	cpi	r18, 0xC0	; 192
     238:	23 02       	muls	r18, r19
     23a:	02 27       	eor	r16, r18
     23c:	38 20       	and	r3, r8
     23e:	08 f8       	.word	0xf808	; ????
     240:	88 88       	ldd	r8, Y+16	; 0x10
     242:	88 70       	andi	r24, 0x08	; 8
     244:	00 00       	nop
     246:	20 3f       	cpi	r18, 0xF0	; 240
     248:	20 20       	and	r2, r0
     24a:	20 11       	cpse	r18, r0
     24c:	0e 00       	.word	0x000e	; ????
     24e:	c0 30       	cpi	r28, 0x00	; 0
     250:	08 08       	sbc	r0, r8
     252:	08 08       	sbc	r0, r8
     254:	38 00       	.word	0x0038	; ????
     256:	07 18       	sub	r0, r7
     258:	20 20       	and	r2, r0
     25a:	20 10       	cpse	r2, r0
     25c:	08 00       	.word	0x0008	; ????
     25e:	08 f8       	.word	0xf808	; ????
     260:	08 08       	sbc	r0, r8
     262:	08 10       	cpse	r0, r8
     264:	e0 00       	.word	0x00e0	; ????
     266:	20 3f       	cpi	r18, 0xF0	; 240
     268:	20 20       	and	r2, r0
     26a:	20 10       	cpse	r2, r0
     26c:	0f 00       	.word	0x000f	; ????
     26e:	08 f8       	.word	0xf808	; ????
     270:	88 88       	ldd	r8, Y+16	; 0x10
     272:	e8 08       	sbc	r14, r8
     274:	10 00       	.word	0x0010	; ????
     276:	20 3f       	cpi	r18, 0xF0	; 240
     278:	20 20       	and	r2, r0
     27a:	23 20       	and	r2, r3
     27c:	18 00       	.word	0x0018	; ????
     27e:	08 f8       	.word	0xf808	; ????
     280:	88 88       	ldd	r8, Y+16	; 0x10
     282:	e8 08       	sbc	r14, r8
     284:	10 00       	.word	0x0010	; ????
     286:	20 3f       	cpi	r18, 0xF0	; 240
     288:	20 00       	.word	0x0020	; ????
     28a:	03 00       	.word	0x0003	; ????
     28c:	00 00       	nop
     28e:	c0 30       	cpi	r28, 0x00	; 0
     290:	08 08       	sbc	r0, r8
     292:	08 38       	cpi	r16, 0x88	; 136
     294:	00 00       	nop
     296:	07 18       	sub	r0, r7
     298:	20 20       	and	r2, r0
     29a:	22 1e       	adc	r2, r18
     29c:	02 00       	.word	0x0002	; ????
     29e:	08 f8       	.word	0xf808	; ????
     2a0:	08 00       	.word	0x0008	; ????
     2a2:	00 08       	sbc	r0, r0
     2a4:	f8 08       	sbc	r15, r8
     2a6:	20 3f       	cpi	r18, 0xF0	; 240
     2a8:	21 01       	movw	r4, r2
     2aa:	01 21       	and	r16, r1
     2ac:	3f 20       	and	r3, r15
     2ae:	00 08       	sbc	r0, r0
     2b0:	08 f8       	.word	0xf808	; ????
     2b2:	08 08       	sbc	r0, r8
     2b4:	00 00       	nop
     2b6:	00 20       	and	r0, r0
     2b8:	20 3f       	cpi	r18, 0xF0	; 240
     2ba:	20 20       	and	r2, r0
     2bc:	00 00       	nop
     2be:	00 00       	nop
     2c0:	08 08       	sbc	r0, r8
     2c2:	f8 08       	sbc	r15, r8
     2c4:	08 00       	.word	0x0008	; ????
     2c6:	c0 80       	ld	r12, Z
     2c8:	80 80       	ld	r8, Z
     2ca:	7f 00       	.word	0x007f	; ????
     2cc:	00 00       	nop
     2ce:	08 f8       	.word	0xf808	; ????
     2d0:	88 c0       	rjmp	.+272    	; 0x3e2 <__stack+0x183>
     2d2:	28 18       	sub	r2, r8
     2d4:	08 00       	.word	0x0008	; ????
     2d6:	20 3f       	cpi	r18, 0xF0	; 240
     2d8:	20 01       	movw	r4, r0
     2da:	26 38       	cpi	r18, 0x86	; 134
     2dc:	20 00       	.word	0x0020	; ????
     2de:	08 f8       	.word	0xf808	; ????
     2e0:	08 00       	.word	0x0008	; ????
     2e2:	00 00       	nop
     2e4:	00 00       	nop
     2e6:	20 3f       	cpi	r18, 0xF0	; 240
     2e8:	20 20       	and	r2, r0
     2ea:	20 20       	and	r2, r0
     2ec:	30 00       	.word	0x0030	; ????
     2ee:	08 f8       	.word	0xf808	; ????
     2f0:	f8 00       	.word	0x00f8	; ????
     2f2:	f8 f8       	.word	0xf8f8	; ????
     2f4:	08 00       	.word	0x0008	; ????
     2f6:	20 3f       	cpi	r18, 0xF0	; 240
     2f8:	00 3f       	cpi	r16, 0xF0	; 240
     2fa:	00 3f       	cpi	r16, 0xF0	; 240
     2fc:	20 00       	.word	0x0020	; ????
     2fe:	08 f8       	.word	0xf808	; ????
     300:	30 c0       	rjmp	.+96     	; 0x362 <__stack+0x103>
     302:	00 08       	sbc	r0, r0
     304:	f8 08       	sbc	r15, r8
     306:	20 3f       	cpi	r18, 0xF0	; 240
     308:	20 00       	.word	0x0020	; ????
     30a:	07 18       	sub	r0, r7
     30c:	3f 00       	.word	0x003f	; ????
     30e:	e0 10       	cpse	r14, r0
     310:	08 08       	sbc	r0, r8
     312:	08 10       	cpse	r0, r8
     314:	e0 00       	.word	0x00e0	; ????
     316:	0f 10       	cpse	r0, r15
     318:	20 20       	and	r2, r0
     31a:	20 10       	cpse	r2, r0
     31c:	0f 00       	.word	0x000f	; ????
     31e:	08 f8       	.word	0xf808	; ????
     320:	08 08       	sbc	r0, r8
     322:	08 08       	sbc	r0, r8
     324:	f0 00       	.word	0x00f0	; ????
     326:	20 3f       	cpi	r18, 0xF0	; 240
     328:	21 01       	movw	r4, r2
     32a:	01 01       	movw	r0, r2
     32c:	00 00       	nop
     32e:	e0 10       	cpse	r14, r0
     330:	08 08       	sbc	r0, r8
     332:	08 10       	cpse	r0, r8
     334:	e0 00       	.word	0x00e0	; ????
     336:	0f 18       	sub	r0, r15
     338:	24 24       	eor	r2, r4
     33a:	38 50       	subi	r19, 0x08	; 8
     33c:	4f 00       	.word	0x004f	; ????
     33e:	08 f8       	.word	0xf808	; ????
     340:	88 88       	ldd	r8, Y+16	; 0x10
     342:	88 88       	ldd	r8, Y+16	; 0x10
     344:	70 00       	.word	0x0070	; ????
     346:	20 3f       	cpi	r18, 0xF0	; 240
     348:	20 00       	.word	0x0020	; ????
     34a:	03 0c       	add	r0, r3
     34c:	30 20       	and	r3, r0
     34e:	00 70       	andi	r16, 0x00	; 0
     350:	88 08       	sbc	r8, r8
     352:	08 08       	sbc	r0, r8
     354:	38 00       	.word	0x0038	; ????
     356:	00 38       	cpi	r16, 0x80	; 128
     358:	20 21       	and	r18, r0
     35a:	21 22       	and	r2, r17
     35c:	1c 00       	.word	0x001c	; ????
     35e:	18 08       	sbc	r1, r8
     360:	08 f8       	.word	0xf808	; ????
     362:	08 08       	sbc	r0, r8
     364:	18 00       	.word	0x0018	; ????
     366:	00 00       	nop
     368:	20 3f       	cpi	r18, 0xF0	; 240
     36a:	20 00       	.word	0x0020	; ????
     36c:	00 00       	nop
     36e:	08 f8       	.word	0xf808	; ????
     370:	08 00       	.word	0x0008	; ????
     372:	00 08       	sbc	r0, r0
     374:	f8 08       	sbc	r15, r8
     376:	00 1f       	adc	r16, r16
     378:	20 20       	and	r2, r0
     37a:	20 20       	and	r2, r0
     37c:	1f 00       	.word	0x001f	; ????
     37e:	08 78       	andi	r16, 0x88	; 136
     380:	88 00       	.word	0x0088	; ????
     382:	00 c8       	rjmp	.-4096   	; 0xfffff384 <__eeprom_end+0xff7ef384>
     384:	38 08       	sbc	r3, r8
     386:	00 00       	nop
     388:	07 38       	cpi	r16, 0x87	; 135
     38a:	0e 01       	movw	r0, r28
     38c:	00 00       	nop
     38e:	f8 08       	sbc	r15, r8
     390:	00 f8       	bld	r0, 0
     392:	00 08       	sbc	r0, r0
     394:	f8 00       	.word	0x00f8	; ????
     396:	03 3c       	cpi	r16, 0xC3	; 195
     398:	07 00       	.word	0x0007	; ????
     39a:	07 3c       	cpi	r16, 0xC7	; 199
     39c:	03 00       	.word	0x0003	; ????
     39e:	08 18       	sub	r0, r8
     3a0:	68 80       	ld	r6, Y
     3a2:	80 68       	ori	r24, 0x80	; 128
     3a4:	18 08       	sbc	r1, r8
     3a6:	20 30       	cpi	r18, 0x00	; 0
     3a8:	2c 03       	fmul	r18, r20
     3aa:	03 2c       	mov	r0, r3
     3ac:	30 20       	and	r3, r0
     3ae:	08 38       	cpi	r16, 0x88	; 136
     3b0:	c8 00       	.word	0x00c8	; ????
     3b2:	c8 38       	cpi	r28, 0x88	; 136
     3b4:	08 00       	.word	0x0008	; ????
     3b6:	00 00       	nop
     3b8:	20 3f       	cpi	r18, 0xF0	; 240
     3ba:	20 00       	.word	0x0020	; ????
     3bc:	00 00       	nop
     3be:	10 08       	sbc	r1, r0
     3c0:	08 08       	sbc	r0, r8
     3c2:	c8 38       	cpi	r28, 0x88	; 136
     3c4:	08 00       	.word	0x0008	; ????
     3c6:	20 38       	cpi	r18, 0x80	; 128
     3c8:	26 21       	and	r18, r6
     3ca:	20 20       	and	r2, r0
     3cc:	18 00       	.word	0x0018	; ????
     3ce:	00 00       	nop
     3d0:	00 fe       	sbrs	r0, 0
     3d2:	02 02       	muls	r16, r18
     3d4:	02 00       	.word	0x0002	; ????
     3d6:	00 00       	nop
     3d8:	00 7f       	andi	r16, 0xF0	; 240
     3da:	40 40       	sbci	r20, 0x00	; 0
     3dc:	40 00       	.word	0x0040	; ????
     3de:	00 0c       	add	r0, r0
     3e0:	30 c0       	rjmp	.+96     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3e2:	00 00       	nop
     3e4:	00 00       	nop
     3e6:	00 00       	nop
     3e8:	00 01       	movw	r0, r0
     3ea:	06 38       	cpi	r16, 0x86	; 134
     3ec:	c0 00       	.word	0x00c0	; ????
     3ee:	00 02       	muls	r16, r16
     3f0:	02 02       	muls	r16, r18
     3f2:	fe 00       	.word	0x00fe	; ????
     3f4:	00 00       	nop
     3f6:	00 40       	sbci	r16, 0x00	; 0
     3f8:	40 40       	sbci	r20, 0x00	; 0
     3fa:	7f 00       	.word	0x007f	; ????
     3fc:	00 00       	nop
     3fe:	00 00       	nop
     400:	04 02       	muls	r16, r20
     402:	02 02       	muls	r16, r18
     404:	04 00       	.word	0x0004	; ????
	...
     416:	80 80       	ld	r8, Z
     418:	80 80       	ld	r8, Z
     41a:	80 80       	ld	r8, Z
     41c:	80 80       	ld	r8, Z
     41e:	00 02       	muls	r16, r16
     420:	02 04       	cpc	r0, r2
	...
     42e:	00 00       	nop
     430:	80 80       	ld	r8, Z
     432:	80 80       	ld	r8, Z
     434:	00 00       	nop
     436:	00 19       	sub	r16, r0
     438:	24 22       	and	r2, r20
     43a:	22 22       	and	r2, r18
     43c:	3f 20       	and	r3, r15
     43e:	08 f8       	.word	0xf808	; ????
     440:	00 80       	ld	r0, Z
     442:	80 00       	.word	0x0080	; ????
     444:	00 00       	nop
     446:	00 3f       	cpi	r16, 0xF0	; 240
     448:	11 20       	and	r1, r1
     44a:	20 11       	cpse	r18, r0
     44c:	0e 00       	.word	0x000e	; ????
     44e:	00 00       	nop
     450:	00 80       	ld	r0, Z
     452:	80 80       	ld	r8, Z
     454:	00 00       	nop
     456:	00 0e       	add	r0, r16
     458:	11 20       	and	r1, r1
     45a:	20 20       	and	r2, r0
     45c:	11 00       	.word	0x0011	; ????
     45e:	00 00       	nop
     460:	00 80       	ld	r0, Z
     462:	80 88       	ldd	r8, Z+16	; 0x10
     464:	f8 00       	.word	0x00f8	; ????
     466:	00 0e       	add	r0, r16
     468:	11 20       	and	r1, r1
     46a:	20 10       	cpse	r2, r0
     46c:	3f 20       	and	r3, r15
     46e:	00 00       	nop
     470:	80 80       	ld	r8, Z
     472:	80 80       	ld	r8, Z
     474:	00 00       	nop
     476:	00 1f       	adc	r16, r16
     478:	22 22       	and	r2, r18
     47a:	22 22       	and	r2, r18
     47c:	13 00       	.word	0x0013	; ????
     47e:	00 80       	ld	r0, Z
     480:	80 f0       	brcs	.+32     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     482:	88 88       	ldd	r8, Y+16	; 0x10
     484:	88 18       	sub	r8, r8
     486:	00 20       	and	r0, r0
     488:	20 3f       	cpi	r18, 0xF0	; 240
     48a:	20 20       	and	r2, r0
     48c:	00 00       	nop
     48e:	00 00       	nop
     490:	80 80       	ld	r8, Z
     492:	80 80       	ld	r8, Z
     494:	80 00       	.word	0x0080	; ????
     496:	00 6b       	ori	r16, 0xB0	; 176
     498:	94 94       	.word	0x9494	; ????
     49a:	94 93       	xch	Z, r25
     49c:	60 00       	.word	0x0060	; ????
     49e:	08 f8       	.word	0xf808	; ????
     4a0:	00 80       	ld	r0, Z
     4a2:	80 80       	ld	r8, Z
     4a4:	00 00       	nop
     4a6:	20 3f       	cpi	r18, 0xF0	; 240
     4a8:	21 00       	.word	0x0021	; ????
     4aa:	00 20       	and	r0, r0
     4ac:	3f 20       	and	r3, r15
     4ae:	00 80       	ld	r0, Z
     4b0:	98 98       	cbi	0x13, 0	; 19
     4b2:	00 00       	nop
     4b4:	00 00       	nop
     4b6:	00 20       	and	r0, r0
     4b8:	20 3f       	cpi	r18, 0xF0	; 240
     4ba:	20 20       	and	r2, r0
     4bc:	00 00       	nop
     4be:	00 00       	nop
     4c0:	00 80       	ld	r0, Z
     4c2:	98 98       	cbi	0x13, 0	; 19
     4c4:	00 00       	nop
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c8:	80 80       	ld	r8, Z
     4ca:	80 7f       	andi	r24, 0xF0	; 240
     4cc:	00 00       	nop
     4ce:	08 f8       	.word	0xf808	; ????
     4d0:	00 00       	nop
     4d2:	80 80       	ld	r8, Z
     4d4:	80 00       	.word	0x0080	; ????
     4d6:	20 3f       	cpi	r18, 0xF0	; 240
     4d8:	24 02       	muls	r18, r20
     4da:	2d 30       	cpi	r18, 0x0D	; 13
     4dc:	20 00       	.word	0x0020	; ????
     4de:	00 08       	sbc	r0, r0
     4e0:	08 f8       	.word	0xf808	; ????
     4e2:	00 00       	nop
     4e4:	00 00       	nop
     4e6:	00 20       	and	r0, r0
     4e8:	20 3f       	cpi	r18, 0xF0	; 240
     4ea:	20 20       	and	r2, r0
     4ec:	00 00       	nop
     4ee:	80 80       	ld	r8, Z
     4f0:	80 80       	ld	r8, Z
     4f2:	80 80       	ld	r8, Z
     4f4:	80 00       	.word	0x0080	; ????
     4f6:	20 3f       	cpi	r18, 0xF0	; 240
     4f8:	20 00       	.word	0x0020	; ????
     4fa:	3f 20       	and	r3, r15
     4fc:	00 3f       	cpi	r16, 0xF0	; 240
     4fe:	80 80       	ld	r8, Z
     500:	00 80       	ld	r0, Z
     502:	80 80       	ld	r8, Z
     504:	00 00       	nop
     506:	20 3f       	cpi	r18, 0xF0	; 240
     508:	21 00       	.word	0x0021	; ????
     50a:	00 20       	and	r0, r0
     50c:	3f 20       	and	r3, r15
     50e:	00 00       	nop
     510:	80 80       	ld	r8, Z
     512:	80 80       	ld	r8, Z
     514:	00 00       	nop
     516:	00 1f       	adc	r16, r16
     518:	20 20       	and	r2, r0
     51a:	20 20       	and	r2, r0
     51c:	1f 00       	.word	0x001f	; ????
     51e:	80 80       	ld	r8, Z
     520:	00 80       	ld	r0, Z
     522:	80 00       	.word	0x0080	; ????
     524:	00 00       	nop
     526:	80 ff       	sbrs	r24, 0
     528:	a1 20       	and	r10, r1
     52a:	20 11       	cpse	r18, r0
     52c:	0e 00       	.word	0x000e	; ????
     52e:	00 00       	nop
     530:	00 80       	ld	r0, Z
     532:	80 80       	ld	r8, Z
     534:	80 00       	.word	0x0080	; ????
     536:	00 0e       	add	r0, r16
     538:	11 20       	and	r1, r1
     53a:	20 a0       	ldd	r2, Z+32	; 0x20
     53c:	ff 80       	ldd	r15, Y+7	; 0x07
     53e:	80 80       	ld	r8, Z
     540:	80 00       	.word	0x0080	; ????
     542:	80 80       	ld	r8, Z
     544:	80 00       	.word	0x0080	; ????
     546:	20 20       	and	r2, r0
     548:	3f 21       	and	r19, r15
     54a:	20 00       	.word	0x0020	; ????
     54c:	01 00       	.word	0x0001	; ????
     54e:	00 00       	nop
     550:	80 80       	ld	r8, Z
     552:	80 80       	ld	r8, Z
     554:	80 00       	.word	0x0080	; ????
     556:	00 33       	cpi	r16, 0x30	; 48
     558:	24 24       	eor	r2, r4
     55a:	24 24       	eor	r2, r4
     55c:	19 00       	.word	0x0019	; ????
     55e:	00 80       	ld	r0, Z
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	80 80       	ld	r8, Z
     564:	00 00       	nop
     566:	00 00       	nop
     568:	00 1f       	adc	r16, r16
     56a:	20 20       	and	r2, r0
     56c:	00 00       	nop
     56e:	80 80       	ld	r8, Z
     570:	00 00       	nop
     572:	00 80       	ld	r0, Z
     574:	80 00       	.word	0x0080	; ????
     576:	00 1f       	adc	r16, r16
     578:	20 20       	and	r2, r0
     57a:	20 10       	cpse	r2, r0
     57c:	3f 20       	and	r3, r15
     57e:	80 80       	ld	r8, Z
     580:	80 00       	.word	0x0080	; ????
     582:	00 80       	ld	r0, Z
     584:	80 80       	ld	r8, Z
     586:	00 01       	movw	r0, r0
     588:	0e 30       	cpi	r16, 0x0E	; 14
     58a:	08 06       	cpc	r0, r24
     58c:	01 00       	.word	0x0001	; ????
     58e:	80 80       	ld	r8, Z
     590:	00 80       	ld	r0, Z
     592:	00 80       	ld	r0, Z
     594:	80 80       	ld	r8, Z
     596:	0f 30       	cpi	r16, 0x0F	; 15
     598:	0c 03       	fmul	r16, r20
     59a:	0c 30       	cpi	r16, 0x0C	; 12
     59c:	0f 00       	.word	0x000f	; ????
     59e:	00 80       	ld	r0, Z
     5a0:	80 00       	.word	0x0080	; ????
     5a2:	80 80       	ld	r8, Z
     5a4:	80 00       	.word	0x0080	; ????
     5a6:	00 20       	and	r0, r0
     5a8:	31 2e       	mov	r3, r17
     5aa:	0e 31       	cpi	r16, 0x1E	; 30
     5ac:	20 00       	.word	0x0020	; ????
     5ae:	80 80       	ld	r8, Z
     5b0:	80 00       	.word	0x0080	; ????
     5b2:	00 80       	ld	r0, Z
     5b4:	80 80       	ld	r8, Z
     5b6:	80 81       	ld	r24, Z
     5b8:	8e 70       	andi	r24, 0x0E	; 14
     5ba:	18 06       	cpc	r1, r24
     5bc:	01 00       	.word	0x0001	; ????
     5be:	00 80       	ld	r0, Z
     5c0:	80 80       	ld	r8, Z
     5c2:	80 80       	ld	r8, Z
     5c4:	80 00       	.word	0x0080	; ????
     5c6:	00 21       	and	r16, r0
     5c8:	30 2c       	mov	r3, r0
     5ca:	22 21       	and	r18, r2
     5cc:	30 00       	.word	0x0030	; ????
     5ce:	00 00       	nop
     5d0:	00 00       	nop
     5d2:	80 7c       	andi	r24, 0xC0	; 192
     5d4:	02 02       	muls	r16, r18
     5d6:	00 00       	nop
     5d8:	00 00       	nop
     5da:	00 3f       	cpi	r16, 0xF0	; 240
     5dc:	40 40       	sbci	r20, 0x00	; 0
     5de:	00 00       	nop
     5e0:	00 00       	nop
     5e2:	ff 00       	.word	0x00ff	; ????
     5e4:	00 00       	nop
     5e6:	00 00       	nop
     5e8:	00 00       	nop
     5ea:	ff 00       	.word	0x00ff	; ????
     5ec:	00 00       	nop
     5ee:	00 02       	muls	r16, r16
     5f0:	02 7c       	andi	r16, 0xC2	; 194
     5f2:	80 00       	.word	0x0080	; ????
     5f4:	00 00       	nop
     5f6:	00 40       	sbci	r16, 0x00	; 0
     5f8:	40 3f       	cpi	r20, 0xF0	; 240
     5fa:	00 00       	nop
     5fc:	00 00       	nop
     5fe:	00 06       	cpc	r0, r16
     600:	01 01       	movw	r0, r2
     602:	02 02       	muls	r16, r18
     604:	04 04       	cpc	r0, r4
	...

0000060e <batEnd>:
     60e:	ff fe 00 00 00 00 00 ff ff fe fe fe fe fc ff ff     ................
     61e:	7f 7f 7f 7f 3f ff 7f 00 00 00 00 00                 ....?.......

0000062a <bat0>:
     62a:	03 03 03 03 03 03 03 03 03 03 00 00 00 00 00 00     ................
	...
     646:	00 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0                 ............

00000652 <bat1>:
     652:	fb fb fb fb fb fb fb fb fb 03 ff ff ff ff ff ff     ................
     662:	ff ff ff 00 ff ff ff ff ff ff ff ff ff 00 df df     ................
     672:	df df df df df df df c0                             ........

0000067a <batBot1>:
     67a:	fe ff 03 fb fb fb fb fb fb fb fb fb 03 ff ff 00     ................
     68a:	ff ff ff ff ff ff ff ff ff 00 ff ff 00 ff ff ff     ................
     69a:	ff ff ff ff ff ff 00 7f ff c0 df df df df df df     ................
     6aa:	df df df c0                                         ....

000006ae <batBot0>:
     6ae:	fe ff 03 03 03 03 03 03 03 03 03 03 03 ff ff 00     ................
	...
     6c6:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 7f     ................
     6d6:	ff c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0                 ............

000006e2 <ssd1306_init_sequence>:
     6e2:	c8 a1 a8 1f da 02 8d 14                             ........

000006ea <stateDANGER>:
     6ea:	00 00 80 c0 f0 f0 f8 fc fc 7e 3e 3f 1f 1f 1f 1f     .........~>?....
     6fa:	1f 1f 1f 1f 3f be fe fc fc f8 f0 f0 c0 80 00 00     ....?...........
     70a:	f8 fe ff ff ff 0f 03 01 00 00 00 00 00 80 c0 e0     ................
     71a:	f0 f8 fc fe 7f 3f 1f 0f 07 03 0f ff ff ff fe f8     .....?..........
     72a:	1f 7f ff ff ff f0 c0 e0 f0 f8 fc fe 7f 3f 1f 0f     .............?..
     73a:	07 03 01 00 00 00 00 00 80 c0 f0 ff ff ff 7f 1f     ................
     74a:	00 00 01 03 0f 0f 1f 3f 3f 7f 7d fc f8 f8 f8 f8     .......??.}.....
     75a:	f8 f8 f8 f8 fc 7c 7e 3f 3f 1f 0f 0f 03 01 00 00     .....|~??.......

0000076a <stateOK>:
     76a:	fc fe 07 03 03 03 03 03 03 03 03 03 83 c3 e3 83     ................
     77a:	03 03 03 03 03 03 03 03 03 03 03 03 03 07 fe fc     ................
     78a:	ff ff 00 00 00 00 04 0e 1e 3e 3f 7f 77 e3 e3 c1     .........>?.w...
     79a:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff     ................
     7aa:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
     7ba:	03 07 0f 0e 1c 38 70 c0 80 00 00 00 00 00 ff ff     .....8p.........
     7ca:	3f 7f e0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ?...............
     7da:	c0 c0 c0 c0 c0 c0 c0 c0 c1 c5 c4 c0 c0 e0 7f 3f     ...............?

000007ea <__ctors_start>:
__ctors_start():
     7ea:	4c 08       	sbc	r4, r12

000007ec <__ctors_end>:
__dtors_end():
     7ec:	11 24       	eor	r1, r1
     7ee:	1f be       	out	0x3f, r1	; 63
     7f0:	cf e5       	ldi	r28, 0x5F	; 95
     7f2:	d2 e0       	ldi	r29, 0x02	; 2
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	cd bf       	out	0x3d, r28	; 61

000007f8 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     7f8:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     7fa:	a0 e7       	ldi	r26, 0x70	; 112
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <.do_clear_bss_start>

00000800 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     800:	1d 92       	st	X+, r1

00000802 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     802:	a2 3a       	cpi	r26, 0xA2	; 162
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     804:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     806:	e1 f7       	brne	.-8      	; 0x800 <.do_clear_bss_loop>

00000808 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     808:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     80a:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     80c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     80e:	e8 e6       	ldi	r30, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     810:	f1 e1       	ldi	r31, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     812:	02 c0       	rjmp	.+4      	; 0x818 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     814:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     816:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     818:	a0 37       	cpi	r26, 0x70	; 112
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     81a:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     81c:	d9 f7       	brne	.-10     	; 0x814 <__do_copy_data+0xc>

0000081e <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     81e:	13 e0       	ldi	r17, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     820:	c6 ef       	ldi	r28, 0xF6	; 246
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     822:	d3 e0       	ldi	r29, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     824:	03 c0       	rjmp	.+6      	; 0x82c <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     826:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     828:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     82a:	96 d4       	rcall	.+2348   	; 0x1158 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     82c:	c5 3f       	cpi	r28, 0xF5	; 245
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     82e:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     830:	d1 f7       	brne	.-12     	; 0x826 <__do_global_ctors+0x8>
     832:	4e d3       	rcall	.+1692   	; 0xed0 <main>
     834:	97 c4       	rjmp	.+2350   	; 0x1164 <_exit>

00000836 <__bad_interrupt>:
__vector_1():
     836:	e4 cb       	rjmp	.-2104   	; 0x0 <__vectors>

00000838 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	6c 01       	movw	r12, r24
     84a:	eb 01       	movw	r28, r22
     84c:	7b 01       	movw	r14, r22
     84e:	e4 0e       	add	r14, r20
     850:	f5 1e       	adc	r15, r21
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:35
  size_t n = 0;
     852:	10 e0       	ldi	r17, 0x00	; 0
     854:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:36
  while (size--) {
     856:	ce 15       	cp	r28, r14
     858:	df 05       	cpc	r29, r15
     85a:	61 f0       	breq	.+24     	; 0x874 <Print::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:37
    n += write(*buffer++);
     85c:	69 91       	ld	r22, Y+
     85e:	d6 01       	movw	r26, r12
     860:	ed 91       	ld	r30, X+
     862:	fc 91       	ld	r31, X
     864:	01 90       	ld	r0, Z+
     866:	f0 81       	ld	r31, Z
     868:	e0 2d       	mov	r30, r0
     86a:	c6 01       	movw	r24, r12
     86c:	09 95       	icall
     86e:	08 0f       	add	r16, r24
     870:	19 1f       	adc	r17, r25
     872:	f1 cf       	rjmp	.-30     	; 0x856 <Print::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:40
  }
  return n;
}
     874:	c8 01       	movw	r24, r16
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	08 95       	ret

00000888 <micros>:
micros():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:187
}

unsigned long micros()
{
  unsigned long m;
  uint8_t oldSREG = SREG, t;
     888:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:189

  cli();
     88a:	f8 94       	cli
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:190
  m = millis_timer_overflow_count;
     88c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <millis_timer_overflow_count>
     890:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <millis_timer_overflow_count+0x1>
     894:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <millis_timer_overflow_count+0x2>
     898:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <millis_timer_overflow_count+0x3>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:192
#if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
  t = TCNT0;
     89c:	22 b7       	in	r18, 0x32	; 50
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:207

#if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    m++;
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR & _BV(TOV0)) && (t < 255))
     89e:	08 b6       	in	r0, 0x38	; 56
     8a0:	01 fe       	sbrs	r0, 1
     8a2:	05 c0       	rjmp	.+10     	; 0x8ae <micros+0x26>
     8a4:	2f 3f       	cpi	r18, 0xFF	; 255
     8a6:	19 f0       	breq	.+6      	; 0x8ae <micros+0x26>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:208
    m++;
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	a1 1d       	adc	r26, r1
     8ac:	b1 1d       	adc	r27, r1
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:217
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
  if ((TIFR & _BV(TOV1)) && (t < 255))
    m++;
#endif

  SREG = oldSREG;
     8ae:	3f bf       	out	0x3f, r19	; 63
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:224

#if F_CPU < 1000000L
  return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
#else
#if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 ) // Can we just do it the naive way? If so great!
  return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     8b0:	ba 2f       	mov	r27, r26
     8b2:	a9 2f       	mov	r26, r25
     8b4:	98 2f       	mov	r25, r24
     8b6:	88 27       	eor	r24, r24
     8b8:	bc 01       	movw	r22, r24
     8ba:	cd 01       	movw	r24, r26
     8bc:	62 0f       	add	r22, r18
     8be:	71 1d       	adc	r23, r1
     8c0:	81 1d       	adc	r24, r1
     8c2:	91 1d       	adc	r25, r1
     8c4:	43 e0       	ldi	r20, 0x03	; 3
     8c6:	66 0f       	add	r22, r22
     8c8:	77 1f       	adc	r23, r23
     8ca:	88 1f       	adc	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	4a 95       	dec	r20
     8d0:	d1 f7       	brne	.-12     	; 0x8c6 <micros+0x3e>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:267
  //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
  //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
  return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
#endif
#endif
}
     8d2:	08 95       	ret

000008d4 <delay>:
delay():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:277
  // Empty
}
void yield(void) __attribute__ ((weak, alias("__empty")));

void delay(unsigned long ms)
{
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	6b 01       	movw	r12, r22
     8e2:	7c 01       	movw	r14, r24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:279
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();
     8e4:	d1 df       	rcall	.-94     	; 0x888 <micros>
     8e6:	eb 01       	movw	r28, r22
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:283

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
     8e8:	cf df       	rcall	.-98     	; 0x888 <micros>
     8ea:	6c 1b       	sub	r22, r28
     8ec:	7d 0b       	sbc	r23, r29
     8ee:	68 3e       	cpi	r22, 0xE8	; 232
     8f0:	73 40       	sbci	r23, 0x03	; 3
     8f2:	a0 f0       	brcs	.+40     	; 0x91c <delay+0x48>
     8f4:	c1 14       	cp	r12, r1
     8f6:	d1 04       	cpc	r13, r1
     8f8:	e1 04       	cpc	r14, r1
     8fa:	f1 04       	cpc	r15, r1
     8fc:	39 f4       	brne	.+14     	; 0x90c <delay+0x38>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:293
  #else
  uint32_t start = millis();
  while((millis() - start) < ms)  /* NOP */yield();
  return;
  #endif
}
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	08 95       	ret
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:284
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
      ms--;
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	c8 1a       	sub	r12, r24
     910:	d1 08       	sbc	r13, r1
     912:	e1 08       	sbc	r14, r1
     914:	f1 08       	sbc	r15, r1
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:285
      start += 1000;
     916:	c8 51       	subi	r28, 0x18	; 24
     918:	dc 4f       	sbci	r29, 0xFC	; 252
     91a:	e6 cf       	rjmp	.-52     	; 0x8e8 <delay+0x14>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:281
void delay(unsigned long ms)
{
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
     91c:	c1 14       	cp	r12, r1
     91e:	d1 04       	cpc	r13, r1
     920:	e1 04       	cpc	r14, r1
     922:	f1 04       	cpc	r15, r1
     924:	09 f7       	brne	.-62     	; 0x8e8 <delay+0x14>
     926:	eb cf       	rjmp	.-42     	; 0x8fe <delay+0x2a>

00000928 <ssd1306_send_stop()>:
ssd1306_send_stop():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:69
static bool ssd1306_send_byte(uint8_t byte) {
	return wireWriteFn(byte);
}

static void ssd1306_send_stop(void) {
	wireEndTransmissionFn();
     928:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <wireEndTransmissionFn>
     92c:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <wireEndTransmissionFn+0x1>
     930:	09 94       	ijmp

00000932 <ssd1306_send_byte(unsigned char)>:
ssd1306_send_byte():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:65
static void ssd1306_send_start(uint8_t ssd1306_i2c_address) {
	wireBeginTransmissionFn(ssd1306_i2c_address);
}

static bool ssd1306_send_byte(uint8_t byte) {
	return wireWriteFn(byte);
     932:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <wireWriteFn>
     936:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <wireWriteFn+0x1>
     93a:	09 94       	ijmp

0000093c <ssd1306_send_data_start()>:
ssd1306_send_start():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:61
static void ssd1306_begin(void) {
	wireBeginFn();
}

static void ssd1306_send_start(uint8_t ssd1306_i2c_address) {
	wireBeginTransmissionFn(ssd1306_i2c_address);
     93c:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <wireBeginTransmissionFn>
     940:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <wireBeginTransmissionFn+0x1>
     944:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <i2c_address>
     948:	09 95       	icall
ssd1306_send_data_start():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:79
	ssd1306_send_byte(SSD1306_COMMAND);
}

static void ssd1306_send_data_start(void) {
	ssd1306_send_start(i2c_address);
	ssd1306_send_byte(SSD1306_DATA);
     94a:	80 e4       	ldi	r24, 0x40	; 64
     94c:	f2 cf       	rjmp	.-28     	; 0x932 <ssd1306_send_byte(unsigned char)>

0000094e <ssd1306_send_data_byte(unsigned char)>:
ssd1306_send_data_byte():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:90
		ssd1306_send_command_start();
		ssd1306_send_byte(byte);
	}
}

static void ssd1306_send_data_byte(uint8_t byte) {
     94e:	cf 93       	push	r28
     950:	c8 2f       	mov	r28, r24
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:91
	if (ssd1306_send_byte(byte) == 0) {
     952:	ef df       	rcall	.-34     	; 0x932 <ssd1306_send_byte(unsigned char)>
     954:	81 11       	cpse	r24, r1
     956:	05 c0       	rjmp	.+10     	; 0x962 <ssd1306_send_data_byte(unsigned char)+0x14>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:92
		ssd1306_send_stop();
     958:	e7 df       	rcall	.-50     	; 0x928 <ssd1306_send_stop()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:93
		ssd1306_send_data_start();
     95a:	f0 df       	rcall	.-32     	; 0x93c <ssd1306_send_data_start()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:94
		ssd1306_send_byte(byte);
     95c:	8c 2f       	mov	r24, r28
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:96
	}
}
     95e:	cf 91       	pop	r28
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:94

static void ssd1306_send_data_byte(uint8_t byte) {
	if (ssd1306_send_byte(byte) == 0) {
		ssd1306_send_stop();
		ssd1306_send_data_start();
		ssd1306_send_byte(byte);
     960:	e8 cf       	rjmp	.-48     	; 0x932 <ssd1306_send_byte(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:96
	}
}
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <ssd1306_send_command_start()>:
ssd1306_send_start():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:61
static void ssd1306_begin(void) {
	wireBeginFn();
}

static void ssd1306_send_start(uint8_t ssd1306_i2c_address) {
	wireBeginTransmissionFn(ssd1306_i2c_address);
     966:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <wireBeginTransmissionFn>
     96a:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <wireBeginTransmissionFn+0x1>
     96e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <i2c_address>
     972:	09 95       	icall
ssd1306_send_command_start():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:74
	wireEndTransmissionFn();
}

static void ssd1306_send_command_start(void) {
	ssd1306_send_start(i2c_address);
	ssd1306_send_byte(SSD1306_COMMAND);
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	dd cf       	rjmp	.-70     	; 0x932 <ssd1306_send_byte(unsigned char)>

00000978 <SSD1306Device::setCursor(unsigned char, unsigned char) [clone .constprop.17]>:
setCursor():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:168

void SSD1306Device::setFont(const DCfont *font) {
	oledFont = font;
}

void SSD1306Device::setCursor(uint8_t x, uint8_t y) {
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	c8 2f       	mov	r28, r24
     980:	16 2f       	mov	r17, r22
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:169
	ssd1306_send_command3(renderingFrame | (y & 0x07), 0x10 | ((x & 0xf0) >> 4), x & 0x0f);
     982:	d6 2f       	mov	r29, r22
     984:	d7 70       	andi	r29, 0x07	; 7
     986:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <renderingFrame>
     98a:	d8 2b       	or	r29, r24
ssd1306_send_command3():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:112
	ssd1306_send_byte(command2);
	ssd1306_send_stop();
}

static void ssd1306_send_command3(uint8_t command1, uint8_t command2, uint8_t command3) {
	ssd1306_send_command_start();
     98c:	ec df       	rcall	.-40     	; 0x966 <ssd1306_send_command_start()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:113
	ssd1306_send_byte(command1);
     98e:	8d 2f       	mov	r24, r29
     990:	d0 df       	rcall	.-96     	; 0x932 <ssd1306_send_byte(unsigned char)>
setCursor():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:169
void SSD1306Device::setFont(const DCfont *font) {
	oledFont = font;
}

void SSD1306Device::setCursor(uint8_t x, uint8_t y) {
	ssd1306_send_command3(renderingFrame | (y & 0x07), 0x10 | ((x & 0xf0) >> 4), x & 0x0f);
     992:	8c 2f       	mov	r24, r28
     994:	82 95       	swap	r24
     996:	8f 70       	andi	r24, 0x0F	; 15
ssd1306_send_command3():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:114
}

static void ssd1306_send_command3(uint8_t command1, uint8_t command2, uint8_t command3) {
	ssd1306_send_command_start();
	ssd1306_send_byte(command1);
	ssd1306_send_byte(command2);
     998:	80 61       	ori	r24, 0x10	; 16
     99a:	cb df       	rcall	.-106    	; 0x932 <ssd1306_send_byte(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:115
	ssd1306_send_byte(command3);
     99c:	8c 2f       	mov	r24, r28
     99e:	8f 70       	andi	r24, 0x0F	; 15
     9a0:	c8 df       	rcall	.-112    	; 0x932 <ssd1306_send_byte(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:116
	ssd1306_send_stop();
     9a2:	c2 df       	rcall	.-124    	; 0x928 <ssd1306_send_stop()>
setCursor():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:170
	oledFont = font;
}

void SSD1306Device::setCursor(uint8_t x, uint8_t y) {
	ssd1306_send_command3(renderingFrame | (y & 0x07), 0x10 | ((x & 0xf0) >> 4), x & 0x0f);
	oledX = x;
     9a4:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <oledX>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:171
	oledY = y;
     9a8:	10 93 a0 00 	sts	0x00A0, r17	; 0x8000a0 <oledY>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:172
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	08 95       	ret

000009b4 <SSD1306Device::bitmap(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char const*) [clone .constprop.16]>:
bitmap():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:257
	}
	setCursor(0, 0);
}
*/

void SSD1306Device::bitmap(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, const uint8_t bitmap[]) {
     9b4:	af 92       	push	r10
     9b6:	bf 92       	push	r11
     9b8:	cf 92       	push	r12
     9ba:	df 92       	push	r13
     9bc:	ff 92       	push	r15
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	d8 2f       	mov	r29, r24
     9c8:	6a 01       	movw	r12, r20
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:258
	uint16_t j = 0;
     9ca:	10 e0       	ldi	r17, 0x00	; 0
     9cc:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:259
 	for (uint8_t y = y0; y < y0 + y1; y++) {
     9ce:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:262
		setCursor(x0,y);
		ssd1306_send_data_start();
		for (uint8_t x = x0; x < x0 + x1; x++) {
     9d0:	86 0f       	add	r24, r22
     9d2:	99 27       	eor	r25, r25
     9d4:	99 1f       	adc	r25, r25
     9d6:	5c 01       	movw	r10, r24
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:260
*/

void SSD1306Device::bitmap(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, const uint8_t bitmap[]) {
	uint16_t j = 0;
 	for (uint8_t y = y0; y < y0 + y1; y++) {
		setCursor(x0,y);
     9d8:	6c 2f       	mov	r22, r28
     9da:	8d 2f       	mov	r24, r29
     9dc:	cd df       	rcall	.-102    	; 0x978 <SSD1306Device::setCursor(unsigned char, unsigned char) [clone .constprop.17]>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:261
		ssd1306_send_data_start();
     9de:	ae df       	rcall	.-164    	; 0x93c <ssd1306_send_data_start()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:262
		for (uint8_t x = x0; x < x0 + x1; x++) {
     9e0:	fd 2e       	mov	r15, r29
     9e2:	fa 14       	cp	r15, r10
     9e4:	1b 04       	cpc	r1, r11
     9e6:	4c f4       	brge	.+18     	; 0x9fa <SSD1306Device::bitmap(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char const*) [clone .constprop.16]+0x46>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:263
			ssd1306_send_data_byte(pgm_read_byte(&bitmap[j++]));
     9e8:	f6 01       	movw	r30, r12
     9ea:	e0 0f       	add	r30, r16
     9ec:	f1 1f       	adc	r31, r17
     9ee:	84 91       	lpm	r24, Z
     9f0:	ae df       	rcall	.-164    	; 0x94e <ssd1306_send_data_byte(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:262
void SSD1306Device::bitmap(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, const uint8_t bitmap[]) {
	uint16_t j = 0;
 	for (uint8_t y = y0; y < y0 + y1; y++) {
		setCursor(x0,y);
		ssd1306_send_data_start();
		for (uint8_t x = x0; x < x0 + x1; x++) {
     9f2:	f3 94       	inc	r15
     9f4:	0f 5f       	subi	r16, 0xFF	; 255
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	f4 cf       	rjmp	.-24     	; 0x9e2 <SSD1306Device::bitmap(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char const*) [clone .constprop.16]+0x2e>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:265
			ssd1306_send_data_byte(pgm_read_byte(&bitmap[j++]));
		}
		ssd1306_send_stop();
     9fa:	96 df       	rcall	.-212    	; 0x928 <ssd1306_send_stop()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:259
}
*/

void SSD1306Device::bitmap(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, const uint8_t bitmap[]) {
	uint16_t j = 0;
 	for (uint8_t y = y0; y < y0 + y1; y++) {
     9fc:	cf 5f       	subi	r28, 0xFF	; 255
     9fe:	c4 30       	cpi	r28, 0x04	; 4
     a00:	59 f7       	brne	.-42     	; 0x9d8 <SSD1306Device::bitmap(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char const*) [clone .constprop.16]+0x24>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:267
		for (uint8_t x = x0; x < x0 + x1; x++) {
			ssd1306_send_data_byte(pgm_read_byte(&bitmap[j++]));
		}
		ssd1306_send_stop();
	}
	setCursor(0, 0);
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:268
}
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	bf 90       	pop	r11
     a16:	af 90       	pop	r10
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:267
		for (uint8_t x = x0; x < x0 + x1; x++) {
			ssd1306_send_data_byte(pgm_read_byte(&bitmap[j++]));
		}
		ssd1306_send_stop();
	}
	setCursor(0, 0);
     a18:	af cf       	rjmp	.-162    	; 0x978 <SSD1306Device::setCursor(unsigned char, unsigned char) [clone .constprop.17]>

00000a1a <SSD1306Device::fill(unsigned char) [clone .constprop.13]>:
fill():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:178

void SSD1306Device::clear(void) {
	fill(0x00);
}

void SSD1306Device::fill(uint8_t fill) {
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:179
	for (uint8_t m = 0; m < SSD1306_PAGES; m++) {
     a20:	c0 e0       	ldi	r28, 0x00	; 0
fillToEOL():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:275
void SSD1306Device::clearToEOL(void) {
	fillToEOL(0x00);
}

void SSD1306Device::fillToEOL(uint8_t fill) {
	fillLength(fill, 128 - oledX);
     a22:	10 e8       	ldi	r17, 0x80	; 128
fill():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:180
	fill(0x00);
}

void SSD1306Device::fill(uint8_t fill) {
	for (uint8_t m = 0; m < SSD1306_PAGES; m++) {
		setCursor(0, m);
     a24:	6c 2f       	mov	r22, r28
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	a7 df       	rcall	.-178    	; 0x978 <SSD1306Device::setCursor(unsigned char, unsigned char) [clone .constprop.17]>
fillToEOL():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:275
void SSD1306Device::clearToEOL(void) {
	fillToEOL(0x00);
}

void SSD1306Device::fillToEOL(uint8_t fill) {
	fillLength(fill, 128 - oledX);
     a2a:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <oledX>
     a2e:	d1 2f       	mov	r29, r17
     a30:	d8 1b       	sub	r29, r24
fillLength():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:279
}

void SSD1306Device::fillLength(uint8_t fill, uint8_t length) {
	oledX += length;
     a32:	10 93 a1 00 	sts	0x00A1, r17	; 0x8000a1 <oledX>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:280
	ssd1306_send_data_start();
     a36:	82 df       	rcall	.-252    	; 0x93c <ssd1306_send_data_start()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:283
	do
	{
		ssd1306_send_data_byte(fill);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	89 df       	rcall	.-238    	; 0x94e <ssd1306_send_data_byte(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:285
	}
	while (--length);
     a3c:	d1 50       	subi	r29, 0x01	; 1
     a3e:	e1 f7       	brne	.-8      	; 0xa38 <SSD1306Device::fill(unsigned char) [clone .constprop.13]+0x1e>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:286
	ssd1306_send_stop();
     a40:	73 df       	rcall	.-282    	; 0x928 <ssd1306_send_stop()>
fill():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:179
void SSD1306Device::clear(void) {
	fill(0x00);
}

void SSD1306Device::fill(uint8_t fill) {
	for (uint8_t m = 0; m < SSD1306_PAGES; m++) {
     a42:	cf 5f       	subi	r28, 0xFF	; 255
     a44:	c4 30       	cpi	r28, 0x04	; 4
     a46:	71 f7       	brne	.-36     	; 0xa24 <SSD1306Device::fill(unsigned char) [clone .constprop.13]+0xa>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:183
		setCursor(0, m);
		fillToEOL(fill);
	}
	setCursor(0, 0);
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:184
}
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:183
void SSD1306Device::fill(uint8_t fill) {
	for (uint8_t m = 0; m < SSD1306_PAGES; m++) {
		setCursor(0, m);
		fillToEOL(fill);
	}
	setCursor(0, 0);
     a52:	92 cf       	rjmp	.-220    	; 0x978 <SSD1306Device::setCursor(unsigned char, unsigned char) [clone .constprop.17]>

00000a54 <SSD1306Device::newLine(unsigned char)>:
newLine():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:187
}

void SSD1306Device::newLine(uint8_t fontHeight) {
	oledY+=fontHeight;
     a54:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <oledY>
     a58:	86 0f       	add	r24, r22
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:188
	if (oledY > SSD1306_PAGES - fontHeight) {
     a5a:	24 e0       	ldi	r18, 0x04	; 4
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	26 1b       	sub	r18, r22
     a60:	31 09       	sbc	r19, r1
     a62:	82 17       	cp	r24, r18
     a64:	13 06       	cpc	r1, r19
     a66:	09 f0       	breq	.+2      	; 0xa6a <SSD1306Device::newLine(unsigned char)+0x16>
     a68:	34 f4       	brge	.+12     	; 0xa76 <SSD1306Device::newLine(unsigned char)+0x22>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:189
		oledY = SSD1306_PAGES - fontHeight;
     a6a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <oledY>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:191
	}
	setCursor(0, oledY);
     a6e:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <oledY>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	81 cf       	rjmp	.-254    	; 0x978 <SSD1306Device::setCursor(unsigned char, unsigned char) [clone .constprop.17]>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:189
}

void SSD1306Device::newLine(uint8_t fontHeight) {
	oledY+=fontHeight;
	if (oledY > SSD1306_PAGES - fontHeight) {
		oledY = SSD1306_PAGES - fontHeight;
     a76:	84 e0       	ldi	r24, 0x04	; 4
     a78:	86 1b       	sub	r24, r22
     a7a:	f7 cf       	rjmp	.-18     	; 0xa6a <SSD1306Device::newLine(unsigned char)+0x16>

00000a7c <SSD1306Device::write(unsigned char)>:
write():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:198

void SSD1306Device::newLine(void) {
	newLine(oledFont->height);
}

size_t SSD1306Device::write(byte c) {
     a7c:	bf 92       	push	r11
     a7e:	cf 92       	push	r12
     a80:	df 92       	push	r13
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:199
	if (!oledFont)
     a8e:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <oledFont>
     a92:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <oledFont+0x1>
     a96:	30 97       	sbiw	r30, 0x00	; 0
     a98:	41 f0       	breq	.+16     	; 0xaaa <SSD1306Device::write(unsigned char)+0x2e>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:202
		return 1;

	if (c == '\r')
     a9a:	6d 30       	cpi	r22, 0x0D	; 13
     a9c:	31 f0       	breq	.+12     	; 0xaaa <SSD1306Device::write(unsigned char)+0x2e>
     a9e:	d6 2f       	mov	r29, r22
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:205
		return 1;
	
	uint8_t h = oledFont->height;
     aa0:	c3 81       	ldd	r28, Z+3	; 0x03
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:207

	if (c == '\n') {
     aa2:	6a 30       	cpi	r22, 0x0A	; 10
     aa4:	71 f4       	brne	.+28     	; 0xac2 <SSD1306Device::write(unsigned char)+0x46>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:208
		newLine(h);
     aa6:	6c 2f       	mov	r22, r28
     aa8:	d5 df       	rcall	.-86     	; 0xa54 <SSD1306Device::newLine(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:241
			}
		}
	}
	while (--line);
	return 1;
}
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	bf 90       	pop	r11
     ac0:	08 95       	ret
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:212
	if (c == '\n') {
		newLine(h);
		return 1;
	}

	uint8_t w = oledFont->width;
     ac2:	b2 80       	ldd	r11, Z+2	; 0x02
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:214

	if (oledX > ((uint8_t)128 - w)) {
     ac4:	40 91 a1 00 	lds	r20, 0x00A1	; 0x8000a1 <oledX>
     ac8:	eb 2c       	mov	r14, r11
     aca:	f1 2c       	mov	r15, r1
     acc:	20 e8       	ldi	r18, 0x80	; 128
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	2e 19       	sub	r18, r14
     ad2:	3f 09       	sbc	r19, r15
     ad4:	42 17       	cp	r20, r18
     ad6:	13 06       	cpc	r1, r19
     ad8:	19 f0       	breq	.+6      	; 0xae0 <SSD1306Device::write(unsigned char)+0x64>
     ada:	14 f0       	brlt	.+4      	; 0xae0 <SSD1306Device::write(unsigned char)+0x64>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:215
		newLine(h);
     adc:	6c 2f       	mov	r22, r28
     ade:	ba df       	rcall	.-140    	; 0xa54 <SSD1306Device::newLine(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:218
	}

	uint16_t offset = ((uint16_t)c - oledFont->first) * w * h;
     ae0:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <oledFont>
     ae4:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <oledFont+0x1>
     ae8:	24 81       	ldd	r18, Z+4	; 0x04
     aea:	8c 2f       	mov	r24, r28
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	b7 01       	movw	r22, r14
     af0:	00 d3       	rcall	.+1536   	; 0x10f2 <__mulhi3>
     af2:	bc 01       	movw	r22, r24
     af4:	4d 2f       	mov	r20, r29
     af6:	42 1b       	sub	r20, r18
     af8:	55 0b       	sbc	r21, r21
     afa:	ca 01       	movw	r24, r20
     afc:	fa d2       	rcall	.+1524   	; 0x10f2 <__mulhi3>
     afe:	8c 01       	movw	r16, r24
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:205
		return 1;

	if (c == '\r')
		return 1;
	
	uint8_t h = oledFont->height;
     b00:	dc 2f       	mov	r29, r28
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:222

	uint16_t offset = ((uint16_t)c - oledFont->first) * w * h;
	uint8_t line = h;
	do
	{
		ssd1306_send_data_start();
     b02:	1c df       	rcall	.-456    	; 0x93c <ssd1306_send_data_start()>
     b04:	c8 01       	movw	r24, r16
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:223
		for (uint8_t i = 0; i < w; i++) {
     b06:	28 2f       	mov	r18, r24
     b08:	20 1b       	sub	r18, r16
     b0a:	2b 15       	cp	r18, r11
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <SSD1306Device::write(unsigned char)+0xb4>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:224
			ssd1306_send_data_byte(pgm_read_byte(&(oledFont->bitmap[offset++])));
     b0e:	6c 01       	movw	r12, r24
     b10:	5f ef       	ldi	r21, 0xFF	; 255
     b12:	c5 1a       	sub	r12, r21
     b14:	d5 0a       	sbc	r13, r21
     b16:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <oledFont>
     b1a:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <oledFont+0x1>
     b1e:	01 90       	ld	r0, Z+
     b20:	f0 81       	ld	r31, Z
     b22:	e0 2d       	mov	r30, r0
     b24:	e8 0f       	add	r30, r24
     b26:	f9 1f       	adc	r31, r25
     b28:	84 91       	lpm	r24, Z
     b2a:	11 df       	rcall	.-478    	; 0x94e <ssd1306_send_data_byte(unsigned char)>
     b2c:	c6 01       	movw	r24, r12
     b2e:	eb cf       	rjmp	.-42     	; 0xb06 <SSD1306Device::write(unsigned char)+0x8a>
     b30:	0e 0d       	add	r16, r14
     b32:	1f 1d       	adc	r17, r15
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:226
		}
		ssd1306_send_stop();
     b34:	f9 de       	rcall	.-526    	; 0x928 <ssd1306_send_stop()>
     b36:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <oledX>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:227
		if (h == 1) {
     b3a:	c1 30       	cpi	r28, 0x01	; 1
     b3c:	31 f4       	brne	.+12     	; 0xb4a <SSD1306Device::write(unsigned char)+0xce>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:228
			oledX+=w;
     b3e:	8b 0d       	add	r24, r11
     b40:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <oledX>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:239
			else {
				setCursor(oledX + w, oledY - (h - 1));
			}
		}
	}
	while (--line);
     b44:	d1 50       	subi	r29, 0x01	; 1
     b46:	e9 f6       	brne	.-70     	; 0xb02 <SSD1306Device::write(unsigned char)+0x86>
     b48:	b0 cf       	rjmp	.-160    	; 0xaaa <SSD1306Device::write(unsigned char)+0x2e>
     b4a:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <oledY>
     b4e:	6f 5f       	subi	r22, 0xFF	; 255
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:231
		ssd1306_send_stop();
		if (h == 1) {
			oledX+=w;
		}
		else {
			if (line > 1) {
     b50:	d2 30       	cpi	r29, 0x02	; 2
     b52:	10 f0       	brcs	.+4      	; 0xb58 <SSD1306Device::write(unsigned char)+0xdc>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:235
				setCursor(oledX, oledY + 1);
			}
			else {
				setCursor(oledX + w, oledY - (h - 1));
     b54:	11 df       	rcall	.-478    	; 0x978 <SSD1306Device::setCursor(unsigned char, unsigned char) [clone .constprop.17]>
     b56:	f6 cf       	rjmp	.-20     	; 0xb44 <SSD1306Device::write(unsigned char)+0xc8>
     b58:	6c 1b       	sub	r22, r28
     b5a:	8b 0d       	add	r24, r11
     b5c:	fb cf       	rjmp	.-10     	; 0xb54 <SSD1306Device::write(unsigned char)+0xd8>

00000b5e <draw_Bat(unsigned char)>:
draw_Bat():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:69
  255,255,254,254,254,254,252,
  255,255,127,127,127,127,63,
  255,127,0,0,0,0,0,
};

void draw_Bat(uint8_t val){
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	d8 2f       	mov	r29, r24
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:70
	if(val==0){oled.bitmap(0,0,13,4,batBot0);} else {oled.bitmap(0,0,13,4,batBot1);}
     b64:	4e ea       	ldi	r20, 0xAE	; 174
     b66:	56 e0       	ldi	r21, 0x06	; 6
     b68:	88 23       	and	r24, r24
     b6a:	11 f0       	breq	.+4      	; 0xb70 <draw_Bat(unsigned char)+0x12>
     b6c:	4a e7       	ldi	r20, 0x7A	; 122
     b6e:	56 e0       	ldi	r21, 0x06	; 6
     b70:	6d e0       	ldi	r22, 0x0D	; 13
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	1f df       	rcall	.-450    	; 0x9b4 <SSD1306Device::bitmap(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char const*) [clone .constprop.16]>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:69
  255,255,254,254,254,254,252,
  255,255,127,127,127,127,63,
  255,127,0,0,0,0,0,
};

void draw_Bat(uint8_t val){
     b76:	c2 e0       	ldi	r28, 0x02	; 2
     b78:	8c 2f       	mov	r24, r28
     b7a:	6a e0       	ldi	r22, 0x0A	; 10
     b7c:	b1 d2       	rcall	.+1378   	; 0x10e0 <__mulqi3>
     b7e:	87 50       	subi	r24, 0x07	; 7
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:71
	if(val==0){oled.bitmap(0,0,13,4,batBot0);} else {oled.bitmap(0,0,13,4,batBot1);}
	for(uint8_t ix=2;ix<=6;ix++){if(ix<=val){oled.bitmap(13+(ix-2)*10,0,10,4,bat1);}else{oled.bitmap(13+(ix-2)*10,0,10,4,bat0);}}
     b80:	42 e5       	ldi	r20, 0x52	; 82
     b82:	56 e0       	ldi	r21, 0x06	; 6
     b84:	dc 17       	cp	r29, r28
     b86:	10 f4       	brcc	.+4      	; 0xb8c <draw_Bat(unsigned char)+0x2e>
     b88:	4a e2       	ldi	r20, 0x2A	; 42
     b8a:	56 e0       	ldi	r21, 0x06	; 6
     b8c:	6a e0       	ldi	r22, 0x0A	; 10
     b8e:	12 df       	rcall	.-476    	; 0x9b4 <SSD1306Device::bitmap(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char const*) [clone .constprop.16]>
     b90:	cf 5f       	subi	r28, 0xFF	; 255
     b92:	c7 30       	cpi	r28, 0x07	; 7
     b94:	89 f7       	brne	.-30     	; 0xb78 <draw_Bat(unsigned char)+0x1a>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:72
	oled.bitmap(13+50,0,7,4,batEnd);
     b96:	4e e0       	ldi	r20, 0x0E	; 14
     b98:	56 e0       	ldi	r21, 0x06	; 6
     b9a:	67 e0       	ldi	r22, 0x07	; 7
     b9c:	8f e3       	ldi	r24, 0x3F	; 63
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:73
}
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:72
};

void draw_Bat(uint8_t val){
	if(val==0){oled.bitmap(0,0,13,4,batBot0);} else {oled.bitmap(0,0,13,4,batBot1);}
	for(uint8_t ix=2;ix<=6;ix++){if(ix<=val){oled.bitmap(13+(ix-2)*10,0,10,4,bat1);}else{oled.bitmap(13+(ix-2)*10,0,10,4,bat0);}}
	oled.bitmap(13+50,0,7,4,batEnd);
     ba2:	08 cf       	rjmp	.-496    	; 0x9b4 <SSD1306Device::bitmap(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char const*) [clone .constprop.16]>

00000ba4 <tinywirem_write(unsigned char)>:
write():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/TinyWireM.cpp:53
  USI_BufIdx = 0; 
  USI_Buf[USI_BufIdx] = (slaveAddr<<TWI_ADR_BITS) | USI_SEND; 
}

size_t USI_TWI::write(uint8_t data){ // buffers up data to send
  if (USI_BufIdx >= USI_BUF_SIZE-1) return 0;       // dont blow out the buffer
     ba4:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <USI_TWI::USI_BufIdx>
     ba8:	e1 31       	cpi	r30, 0x11	; 17
     baa:	48 f4       	brcc	.+18     	; 0xbbe <tinywirem_write(unsigned char)+0x1a>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/TinyWireM.cpp:54
  USI_BufIdx++;                                   // inc for next byte in buffer
     bac:	ef 5f       	subi	r30, 0xFF	; 255
     bae:	e0 93 82 00 	sts	0x0082, r30	; 0x800082 <USI_TWI::USI_BufIdx>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/TinyWireM.cpp:55
  USI_Buf[USI_BufIdx] = data;
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	e0 59       	subi	r30, 0x90	; 144
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	80 83       	st	Z, r24
tinywirem_write():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/TinyWireM.cpp:56
  return 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	08 95       	ret
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/TinyWireM.cpp:53
  USI_BufIdx = 0; 
  USI_Buf[USI_BufIdx] = (slaveAddr<<TWI_ADR_BITS) | USI_SEND; 
}

size_t USI_TWI::write(uint8_t data){ // buffers up data to send
  if (USI_BufIdx >= USI_BUF_SIZE-1) return 0;       // dont blow out the buffer
     bbe:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_TinyWireM.h:23
	TinyWireM.beginTransmission(i2c_address);
}

static bool tinywirem_write(uint8_t byte) {
	return TinyWireM.write(byte);
}
     bc0:	08 95       	ret

00000bc2 <tinywirem_beginTransmission(unsigned char)>:
beginTransmission():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/TinyWireM.cpp:48
void USI_TWI::begin(){ // initialize I2C lib
  USI_TWI_Master_Initialise();          
}

void USI_TWI::beginTransmission(uint8_t slaveAddr){ // setup address & write bit
  USI_BufIdx = 0; 
     bc2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <USI_TWI::USI_BufIdx>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/TinyWireM.cpp:49
  USI_Buf[USI_BufIdx] = (slaveAddr<<TWI_ADR_BITS) | USI_SEND; 
     bc6:	88 0f       	add	r24, r24
     bc8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
tinywirem_beginTransmission():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_TinyWireM.h:19
	TinyWireM.begin();
}

static void tinywirem_beginTransmission(uint8_t i2c_address) {
	TinyWireM.beginTransmission(i2c_address);
}
     bcc:	08 95       	ret

00000bce <tinywirem_begin()>:
USI_TWI_Master_Initialise():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:48
/*---------------------------------------------------------------
 USI TWI single master initialization function
---------------------------------------------------------------*/
void USI_TWI_Master_Initialise( void )
{
  PORT_USI |= (1<<PIN_USI_SDA);           // Enable pullup on SDA, to set high as released state.
     bce:	c0 9a       	sbi	0x18, 0	; 24
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:49
  PORT_USI |= (1<<PIN_USI_SCL);           // Enable pullup on SCL, to set high as released state.
     bd0:	c2 9a       	sbi	0x18, 2	; 24
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:51
  
  DDR_USI  |= (1<<PIN_USI_SCL);           // Enable SCL as output.
     bd2:	ba 9a       	sbi	0x17, 2	; 23
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:52
  DDR_USI  |= (1<<PIN_USI_SDA);           // Enable SDA as output.
     bd4:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:54
  
  USIDR    =  0xFF;                       // Preload dataregister with "released level" data.
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	8f b9       	out	0x0f, r24	; 15
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:55
  USICR    =  (0<<USISIE)|(0<<USIOIE)|                            // Disable Interrupts.
     bda:	8a e2       	ldi	r24, 0x2A	; 42
     bdc:	8d b9       	out	0x0d, r24	; 13
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:59
              (1<<USIWM1)|(0<<USIWM0)|                            // Set USI in Two-wire mode.
              (1<<USICS1)|(0<<USICS0)|(1<<USICLK)|                // Software stobe as counter clock source
              (0<<USITC);
  USISR   =   (1<<USISIF)|(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|      // Clear flags,
     bde:	80 ef       	ldi	r24, 0xF0	; 240
     be0:	8e b9       	out	0x0e, r24	; 14
tinywirem_begin():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_TinyWireM.h:15

#include <TinyWireM.h>  // Version with buffer bugfix: https://github.com/adafruit/TinyWireM

static void tinywirem_begin(void) {
	TinyWireM.begin();
}
     be2:	08 95       	ret

00000be4 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.3]>:
printNumber():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:229

#endif

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     be4:	8f 92       	push	r8
     be6:	9f 92       	push	r9
     be8:	af 92       	push	r10
     bea:	bf 92       	push	r11
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	a1 97       	sbiw	r28, 0x21	; 33
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	16 2f       	mov	r17, r22
     c0a:	04 2f       	mov	r16, r20
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:233
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     c0c:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:236

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     c0e:	42 30       	cpi	r20, 0x02	; 2
     c10:	08 f4       	brcc	.+2      	; 0xc14 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.3]+0x30>
     c12:	0a e0       	ldi	r16, 0x0A	; 10
     c14:	7e 01       	movw	r14, r28
     c16:	21 e2       	ldi	r18, 0x21	; 33
     c18:	e2 0e       	add	r14, r18
     c1a:	f1 1c       	adc	r15, r1
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:240

  do {
    unsigned long m = n;
    n /= base;
     c1c:	80 2e       	mov	r8, r16
     c1e:	91 2c       	mov	r9, r1
     c20:	b1 2c       	mov	r11, r1
     c22:	a1 2c       	mov	r10, r1
     c24:	61 2f       	mov	r22, r17
     c26:	a5 01       	movw	r20, r10
     c28:	94 01       	movw	r18, r8
     c2a:	74 d2       	rcall	.+1256   	; 0x1114 <__udivmodsi4>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:241
    char c = m - base * n;
     c2c:	80 2f       	mov	r24, r16
     c2e:	62 2f       	mov	r22, r18
     c30:	57 d2       	rcall	.+1198   	; 0x10e0 <__mulqi3>
     c32:	18 1b       	sub	r17, r24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:242
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     c34:	1a 30       	cpi	r17, 0x0A	; 10
     c36:	3c f5       	brge	.+78     	; 0xc86 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.3]+0xa2>
     c38:	10 5d       	subi	r17, 0xD0	; 208
     c3a:	f7 01       	movw	r30, r14
     c3c:	12 93       	st	-Z, r17
     c3e:	7f 01       	movw	r14, r30
     c40:	12 2f       	mov	r17, r18
     c42:	73 2f       	mov	r23, r19
     c44:	ca 01       	movw	r24, r20
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:243
  } while(n);
     c46:	23 2b       	or	r18, r19
     c48:	24 2b       	or	r18, r20
     c4a:	25 2b       	or	r18, r21
     c4c:	59 f7       	brne	.-42     	; 0xc24 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.3]+0x40>
write():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.h:81

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     c4e:	01 90       	ld	r0, Z+
     c50:	00 20       	and	r0, r0
     c52:	e9 f7       	brne	.-6      	; 0xc4e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.3]+0x6a>
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	af 01       	movw	r20, r30
     c58:	4e 19       	sub	r20, r14
     c5a:	5f 09       	sbc	r21, r15
     c5c:	b7 01       	movw	r22, r14
     c5e:	8c e9       	ldi	r24, 0x9C	; 156
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	ea dd       	rcall	.-1068   	; 0x838 <Print::write(unsigned char const*, unsigned int)>
printNumber():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:246

  return write(str);
}
     c64:	a1 96       	adiw	r28, 0x21	; 33
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	bf 90       	pop	r11
     c7e:	af 90       	pop	r10
     c80:	9f 90       	pop	r9
     c82:	8f 90       	pop	r8
     c84:	08 95       	ret
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:242

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     c86:	19 5c       	subi	r17, 0xC9	; 201
     c88:	d8 cf       	rjmp	.-80     	; 0xc3a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.3]+0x56>

00000c8a <USI_TWI_Master_Start()>:
USI_TWI_Master_Start():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:291
 Function for generating a TWI Start Condition. 
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Start( void )
{
/* Release SCL to ensure that (repeated) Start can be performed */
  PORT_USI |= (1<<PIN_USI_SCL);                     // Release SCL.
     c8a:	c2 9a       	sbi	0x18, 2	; 24
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:292
  while( !(PORT_USI & (1<<PIN_USI_SCL)) );          // Verify that SCL becomes high.
     c8c:	c2 9b       	sbis	0x18, 2	; 24
     c8e:	fe cf       	rjmp	.-4      	; 0xc8c <USI_TWI_Master_Start()+0x2>
_delay_us():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/delay.h:276
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c90:	8d e0       	ldi	r24, 0x0D	; 13
     c92:	8a 95       	dec	r24
     c94:	f1 f7       	brne	.-4      	; 0xc92 <USI_TWI_Master_Start()+0x8>
     c96:	00 00       	nop
USI_TWI_Master_Start():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:296
  _delay_us(T2_TWI);

/* Generate Start Condition */
  PORT_USI &= ~(1<<PIN_USI_SDA);                    // Force SDA LOW.
     c98:	c0 98       	cbi	0x18, 0	; 24
_delay_us():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/delay.h:276
     c9a:	8a e0       	ldi	r24, 0x0A	; 10
     c9c:	8a 95       	dec	r24
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <USI_TWI_Master_Start()+0x12>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <USI_TWI_Master_Start()+0x18>
USI_TWI_Master_Start():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:298
	_delay_us(T4_TWI);                         
  PORT_USI &= ~(1<<PIN_USI_SCL);                    // Pull SCL LOW.
     ca2:	c2 98       	cbi	0x18, 2	; 24
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:299
  PORT_USI |= (1<<PIN_USI_SDA);                     // Release SDA.
     ca4:	c0 9a       	sbi	0x18, 0	; 24
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:302

#ifdef SIGNAL_VERIFY
  if( !(USISR & (1<<USISIF)) )
     ca6:	77 99       	sbic	0x0e, 7	; 14
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <USI_TWI_Master_Start()+0x2a>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:304
  {
    USI_TWI_state.errorState = USI_TWI_MISSING_START_CON;  
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <USI_TWI_state>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:305
    return (FALSE);
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	08 95       	ret
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:308
  }
#endif
  return (TRUE);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:309
}
     cb6:	08 95       	ret

00000cb8 <USI_TWI_Master_Transfer(unsigned char)>:
USI_TWI_Master_Transfer():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:263
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer( unsigned char temp )
{
  USISR = temp;                                     // Set USISR according to temp.
     cb8:	8e b9       	out	0x0e, r24	; 14
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:272
           (1<<USICS1)|(0<<USICS0)|(1<<USICLK)|     // Software clock strobe as source.
           (1<<USITC);                              // Toggle Clock Port.
  do
  { 
	_delay_us(T2_TWI);
    USICR = temp;                          // Generate positve SCL edge.
     cba:	8b e2       	ldi	r24, 0x2B	; 43
_delay_us():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/delay.h:276
     cbc:	9d e0       	ldi	r25, 0x0D	; 13
     cbe:	9a 95       	dec	r25
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <USI_TWI_Master_Transfer(unsigned char)+0x6>
     cc2:	00 00       	nop
USI_TWI_Master_Transfer():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:272
     cc4:	8d b9       	out	0x0d, r24	; 13
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:273
    while( !(PIN_USI & (1<<PIN_USI_SCL)) );// Wait for SCL to go high.
     cc6:	b2 9b       	sbis	0x16, 2	; 22
     cc8:	fe cf       	rjmp	.-4      	; 0xcc6 <USI_TWI_Master_Transfer(unsigned char)+0xe>
_delay_us():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/delay.h:276
     cca:	9a e0       	ldi	r25, 0x0A	; 10
     ccc:	9a 95       	dec	r25
     cce:	f1 f7       	brne	.-4      	; 0xccc <USI_TWI_Master_Transfer(unsigned char)+0x14>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <USI_TWI_Master_Transfer(unsigned char)+0x1a>
USI_TWI_Master_Transfer():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:275
	_delay_us(T4_TWI);
    USICR = temp;                          // Generate negative SCL edge.
     cd2:	8d b9       	out	0x0d, r24	; 13
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:276
  }while( !(USISR & (1<<USIOIF)) );        // Check for transfer complete.
     cd4:	76 9b       	sbis	0x0e, 6	; 14
     cd6:	f2 cf       	rjmp	.-28     	; 0xcbc <USI_TWI_Master_Transfer(unsigned char)+0x4>
_delay_us():
     cd8:	8d e0       	ldi	r24, 0x0D	; 13
     cda:	8a 95       	dec	r24
     cdc:	f1 f7       	brne	.-4      	; 0xcda <USI_TWI_Master_Transfer(unsigned char)+0x22>
     cde:	00 00       	nop
USI_TWI_Master_Transfer():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:279
  
	_delay_us(T2_TWI);
  temp  = USIDR;                           // Read out data.
     ce0:	8f b1       	in	r24, 0x0f	; 15
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:280
  USIDR = 0xFF;                            // Release SDA.
     ce2:	9f ef       	ldi	r25, 0xFF	; 255
     ce4:	9f b9       	out	0x0f, r25	; 15
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:281
  DDR_USI |= (1<<PIN_USI_SDA);             // Enable SDA as output.
     ce6:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:284

  return temp;                             // Return the data from the USIDR
}
     ce8:	08 95       	ret

00000cea <tinywirem_endTransmission()>:
tinywirem_endTransmission():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_TinyWireM.h:25

static bool tinywirem_write(uint8_t byte) {
	return TinyWireM.write(byte);
}

static void tinywirem_endTransmission(void) {
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
endTransmission():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/TinyWireM.cpp:66
}

uint8_t USI_TWI::endTransmission(uint8_t stop){ // actually sends the buffer
  bool xferOK = false;
  uint8_t errorCode = 0;
  xferOK = USI_TWI_Start_Read_Write(USI_Buf,USI_BufIdx+1); // core func that does the work
     cfa:	00 91 82 00 	lds	r16, 0x0082	; 0x800082 <USI_TWI::USI_BufIdx>
USI_TWI_Start_Transceiver_With_Data():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:140
	unsigned char savedMsgSize; 

//This clear must be done before calling this function so that memReadMode can be specified.
//  USI_TWI_state.errorState = 0;				// Clears all mode bits also

  USI_TWI_state.addressMode = TRUE;			// Always true for first byte
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <USI_TWI_state>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:173
    USI_TWI_state.errorState = USI_TWI_UE_DATA_COL;
    return (FALSE);
  }
#endif

  if ( !(*msg & (1<<TWI_READ_BIT)) )                // The LSB in the address byte determines if is a masterRead or masterWrite operation.
     d04:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
     d08:	80 fd       	sbrc	r24, 0
     d0a:	03 c0       	rjmp	.+6      	; 0xd12 <tinywirem_endTransmission()+0x28>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:175
  {
    USI_TWI_state.masterWriteDataMode = TRUE;
     d0c:	83 e0       	ldi	r24, 0x03	; 3
     d0e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <USI_TWI_state>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:184
//	{
		savedMsg = msg;
		savedMsgSize = msgSize;
//	}

	if ( !USI_TWI_Master_Start( ))
     d12:	bb df       	rcall	.-138    	; 0xc8a <USI_TWI_Master_Start()>
     d14:	88 23       	and	r24, r24
     d16:	11 f1       	breq	.+68     	; 0xd5c <tinywirem_endTransmission()+0x72>
endTransmission():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/TinyWireM.cpp:66
     d18:	0f 5f       	subi	r16, 0xFF	; 255
     d1a:	10 2f       	mov	r17, r16
     d1c:	c0 e7       	ldi	r28, 0x70	; 112
     d1e:	d0 e0       	ldi	r29, 0x00	; 0
USI_TWI_Start_Transceiver_With_Data():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:240
      *(msg++)  = USI_TWI_Master_Transfer( tempUSISR_8bit );

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if( msgSize == 1)                            // If transmission of last byte was performed.
      {
        USIDR = 0xFF;                              // Load NACK to confirm End Of Transmission.
     d20:	dd 24       	eor	r13, r13
     d22:	da 94       	dec	r13
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:216
	  if ((!USI_TWI_state.addressMode) && USI_TWI_state.memReadMode)// means memory start address has been written
	  {
		msg = savedMsg;					// start at slave address again
		*(msg) |= (TRUE<<TWI_READ_BIT);  // set the Read Bit on Slave address
		USI_TWI_state.errorState = 0;
		USI_TWI_state.addressMode = TRUE;	// Now set up for the Read cycle
     d24:	cc 24       	eor	r12, r12
     d26:	c3 94       	inc	r12
     d28:	7e 01       	movw	r14, r28
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	e8 1a       	sub	r14, r24
     d2e:	f8 0a       	sbc	r15, r24
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:193

/*Write address and Read/Write data */
  do
  {
    /* If masterWrite cycle (or inital address tranmission)*/
    if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode)
     d30:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <USI_TWI_state>
     d34:	83 70       	andi	r24, 0x03	; 3
     d36:	09 f4       	brne	.+2      	; 0xd3a <tinywirem_endTransmission()+0x50>
     d38:	47 c0       	rjmp	.+142    	; 0xdc8 <tinywirem_endTransmission()+0xde>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:196
    {
      /* Write a byte */
      PORT_USI &= ~(1<<PIN_USI_SCL);                // Pull SCL LOW.
     d3a:	c2 98       	cbi	0x18, 2	; 24
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:197
      USIDR     = *(msg++);                        // Setup data.
     d3c:	88 81       	ld	r24, Y
     d3e:	8f b9       	out	0x0f, r24	; 15
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:198
      USI_TWI_Master_Transfer( tempUSISR_8bit );    // Send 8 bits on bus.
     d40:	80 ef       	ldi	r24, 0xF0	; 240
     d42:	ba df       	rcall	.-140    	; 0xcb8 <USI_TWI_Master_Transfer(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:201
      
      /* Clock and verify (N)ACK from slave */
      DDR_USI  &= ~(1<<PIN_USI_SDA);                // Enable SDA as input.
     d44:	b8 98       	cbi	0x17, 0	; 23
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:202
      if( USI_TWI_Master_Transfer( tempUSISR_1bit ) & (1<<TWI_NACK_BIT) ) 
     d46:	8e ef       	ldi	r24, 0xFE	; 254
     d48:	b7 df       	rcall	.-146    	; 0xcb8 <USI_TWI_Master_Transfer(unsigned char)>
     d4a:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <USI_TWI_state>
     d4e:	80 ff       	sbrs	r24, 0
     d50:	10 c0       	rjmp	.+32     	; 0xd72 <tinywirem_endTransmission()+0x88>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:205
      {
        if ( USI_TWI_state.addressMode )
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
     d52:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:204
      
      /* Clock and verify (N)ACK from slave */
      DDR_USI  &= ~(1<<PIN_USI_SDA);                // Enable SDA as input.
      if( USI_TWI_Master_Transfer( tempUSISR_1bit ) & (1<<TWI_NACK_BIT) ) 
      {
        if ( USI_TWI_state.addressMode )
     d54:	90 ff       	sbrs	r25, 0
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:207
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <USI_TWI_state>
endTransmission():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/TinyWireM.cpp:67
  USI_BufIdx = 0;
     d5c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <USI_TWI::USI_BufIdx>
tinywirem_endTransmission():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_TinyWireM.h:27
	TinyWireM.endTransmission();
}
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	ff 90       	pop	r15
     d6a:	ef 90       	pop	r14
     d6c:	df 90       	pop	r13
     d6e:	cf 90       	pop	r12
     d70:	08 95       	ret
USI_TWI_Start_Transceiver_With_Data():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:211
        return (FALSE);
      }
	  
	  if ((!USI_TWI_state.addressMode) && USI_TWI_state.memReadMode)// means memory start address has been written
     d72:	89 2f       	mov	r24, r25
     d74:	85 70       	andi	r24, 0x05	; 5
     d76:	84 30       	cpi	r24, 0x04	; 4
     d78:	61 f4       	brne	.+24     	; 0xd92 <tinywirem_endTransmission()+0xa8>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:214
	  {
		msg = savedMsg;					// start at slave address again
		*(msg) |= (TRUE<<TWI_READ_BIT);  // set the Read Bit on Slave address
     d7a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:216
		USI_TWI_state.errorState = 0;
		USI_TWI_state.addressMode = TRUE;	// Now set up for the Read cycle
     d84:	c0 92 8a 00 	sts	0x008A, r12	; 0x80008a <USI_TWI_state>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:219
		msgSize = savedMsgSize;				// Set byte count correctly
		// NOte that the length should be Slave adrs byte + # bytes to read + 1 (gets decremented below)
		if ( !USI_TWI_Master_Start( ))
     d88:	80 df       	rcall	.-256    	; 0xc8a <USI_TWI_Master_Start()>
     d8a:	81 11       	cpse	r24, r1
     d8c:	29 c0       	rjmp	.+82     	; 0xde0 <tinywirem_endTransmission()+0xf6>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:221
		{
			USI_TWI_state.errorState = USI_TWI_BAD_MEM_READ;
     d8e:	8a e0       	ldi	r24, 0x0A	; 10
     d90:	e3 cf       	rjmp	.-58     	; 0xd58 <tinywirem_endTransmission()+0x6e>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:227
			return (FALSE);                           // Send a START condition on the TWI bus.
		}
	  }
	  else
	  {
		USI_TWI_state.addressMode = FALSE;            // Only perform address transmission once.
     d92:	9e 7f       	andi	r25, 0xFE	; 254
     d94:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <USI_TWI_state>
tinywirem_endTransmission():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:235
    /* Else masterRead cycle*/
    else
    {
      /* Read a data byte */
      DDR_USI   &= ~(1<<PIN_USI_SDA);               // Enable SDA as input.
      *(msg++)  = USI_TWI_Master_Transfer( tempUSISR_8bit );
     d98:	e7 01       	movw	r28, r14
USI_TWI_Start_Transceiver_With_Data():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:248
      {
        USIDR = 0x00;                              // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer( tempUSISR_1bit );   // Generate ACK/NACK.
    }
  }while( --msgSize) ;                             // Until all data sent/received.
     d9a:	11 50       	subi	r17, 0x01	; 1
     d9c:	29 f6       	brne	.-118    	; 0xd28 <tinywirem_endTransmission()+0x3e>
endTransmission():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/TinyWireM.cpp:67
     d9e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <USI_TWI::USI_BufIdx>
USI_TWI_Master_Stop():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:316
 Function for generating a TWI Stop Condition. Used to release 
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop( void )
{
  PORT_USI &= ~(1<<PIN_USI_SDA);           // Pull SDA low.
     da2:	c0 98       	cbi	0x18, 0	; 24
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:317
  PORT_USI |= (1<<PIN_USI_SCL);            // Release SCL.
     da4:	c2 9a       	sbi	0x18, 2	; 24
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:318
  while( !(PIN_USI & (1<<PIN_USI_SCL)) );  // Wait for SCL to go high.  
     da6:	b2 9b       	sbis	0x16, 2	; 22
     da8:	fe cf       	rjmp	.-4      	; 0xda6 <tinywirem_endTransmission()+0xbc>
_delay_us():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/delay.h:276
     daa:	8a e0       	ldi	r24, 0x0A	; 10
     dac:	8a 95       	dec	r24
     dae:	f1 f7       	brne	.-4      	; 0xdac <tinywirem_endTransmission()+0xc2>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <tinywirem_endTransmission()+0xc8>
USI_TWI_Master_Stop():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:320
	_delay_us(T4_TWI);
  PORT_USI |= (1<<PIN_USI_SDA);            // Release SDA.
     db2:	c0 9a       	sbi	0x18, 0	; 24
_delay_us():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/delay.h:276
     db4:	8d e0       	ldi	r24, 0x0D	; 13
     db6:	8a 95       	dec	r24
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <tinywirem_endTransmission()+0xcc>
     dba:	00 00       	nop
USI_TWI_Master_Stop():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:324
	_delay_us(T2_TWI);
  
#ifdef SIGNAL_VERIFY
  if( !(USISR & (1<<USIPF)) )
     dbc:	75 99       	sbic	0x0e, 5	; 14
     dbe:	d0 cf       	rjmp	.-96     	; 0xd60 <tinywirem_endTransmission()+0x76>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:326
  {
    USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;    
     dc0:	84 e0       	ldi	r24, 0x04	; 4
     dc2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <USI_TWI_state>
     dc6:	cc cf       	rjmp	.-104    	; 0xd60 <tinywirem_endTransmission()+0x76>
USI_TWI_Start_Transceiver_With_Data():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:234
    }
    /* Else masterRead cycle*/
    else
    {
      /* Read a data byte */
      DDR_USI   &= ~(1<<PIN_USI_SDA);               // Enable SDA as input.
     dc8:	b8 98       	cbi	0x17, 0	; 23
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:235
      *(msg++)  = USI_TWI_Master_Transfer( tempUSISR_8bit );
     dca:	80 ef       	ldi	r24, 0xF0	; 240
     dcc:	75 df       	rcall	.-278    	; 0xcb8 <USI_TWI_Master_Transfer(unsigned char)>
     dce:	88 83       	st	Y, r24
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:238

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if( msgSize == 1)                            // If transmission of last byte was performed.
     dd0:	11 30       	cpi	r17, 0x01	; 1
     dd2:	21 f4       	brne	.+8      	; 0xddc <tinywirem_endTransmission()+0xf2>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:240
      {
        USIDR = 0xFF;                              // Load NACK to confirm End Of Transmission.
     dd4:	df b8       	out	0x0f, r13	; 15
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:246
      }
      else
      {
        USIDR = 0x00;                              // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer( tempUSISR_1bit );   // Generate ACK/NACK.
     dd6:	8e ef       	ldi	r24, 0xFE	; 254
     dd8:	6f df       	rcall	.-290    	; 0xcb8 <USI_TWI_Master_Transfer(unsigned char)>
     dda:	de cf       	rjmp	.-68     	; 0xd98 <tinywirem_endTransmission()+0xae>
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:244
      {
        USIDR = 0xFF;                              // Load NACK to confirm End Of Transmission.
      }
      else
      {
        USIDR = 0x00;                              // Load ACK. Set data register bit 7 (output for SDA) low.
     ddc:	1f b8       	out	0x0f, r1	; 15
     dde:	fb cf       	rjmp	.-10     	; 0xdd6 <tinywirem_endTransmission()+0xec>
tinywirem_endTransmission():
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:217
	  {
		msg = savedMsg;					// start at slave address again
		*(msg) |= (TRUE<<TWI_READ_BIT);  // set the Read Bit on Slave address
		USI_TWI_state.errorState = 0;
		USI_TWI_state.addressMode = TRUE;	// Now set up for the Read cycle
		msgSize = savedMsgSize;				// Set byte count correctly
     de0:	10 2f       	mov	r17, r16
C:\Users\Pavel\Documents\Arduino\libraries\TinyWireM/USI_TWI_Master.cpp:213
        return (FALSE);
      }
	  
	  if ((!USI_TWI_state.addressMode) && USI_TWI_state.memReadMode)// means memory start address has been written
	  {
		msg = savedMsg;					// start at slave address again
     de2:	c0 e7       	ldi	r28, 0x70	; 112
     de4:	d0 e0       	ldi	r29, 0x00	; 0
     de6:	d9 cf       	rjmp	.-78     	; 0xd9a <tinywirem_endTransmission()+0xb0>

00000de8 <__vector_5>:
__vector_5():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:130
#else

#error Millis() timer not defined!

#endif
{
     de8:	1f 92       	push	r1
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	2f 93       	push	r18
     df4:	3f 93       	push	r19
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:133
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
     dfe:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <millis_timer_millis>
     e02:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <millis_timer_millis+0x1>
     e06:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <millis_timer_millis+0x2>
     e0a:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <millis_timer_millis+0x3>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:134
  unsigned char f = millis_timer_fract;
     e0e:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <millis_timer_fract>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:146
    f -= FRACT_MAX;
    m += 1;
  }
...rmv */

  f += FRACT_INC;
     e12:	26 e0       	ldi	r18, 0x06	; 6
     e14:	23 0f       	add	r18, r19
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:148

  if (f >= FRACT_MAX)
     e16:	2d 37       	cpi	r18, 0x7D	; 125
     e18:	68 f1       	brcs	.+90     	; 0xe74 <__vector_5+0x8c>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:150
  {
    f -= FRACT_MAX;
     e1a:	29 e8       	ldi	r18, 0x89	; 137
     e1c:	23 0f       	add	r18, r19
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:152
  m += 1;
    m += MILLIS_INC;
     e1e:	03 96       	adiw	r24, 0x03	; 3
     e20:	a1 1d       	adc	r26, r1
     e22:	b1 1d       	adc	r27, r1
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:159
  else
  {
    m += MILLIS_INC;
  }

  millis_timer_fract = f;
     e24:	20 93 8b 00 	sts	0x008B, r18	; 0x80008b <millis_timer_fract>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:160
  millis_timer_millis = m;
     e28:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <millis_timer_millis>
     e2c:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <millis_timer_millis+0x1>
     e30:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <millis_timer_millis+0x2>
     e34:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <millis_timer_millis+0x3>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:161
  millis_timer_overflow_count++;
     e38:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <millis_timer_overflow_count>
     e3c:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <millis_timer_overflow_count+0x1>
     e40:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <millis_timer_overflow_count+0x2>
     e44:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <millis_timer_overflow_count+0x3>
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	a1 1d       	adc	r26, r1
     e4c:	b1 1d       	adc	r27, r1
     e4e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <millis_timer_overflow_count>
     e52:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <millis_timer_overflow_count+0x1>
     e56:	a0 93 92 00 	sts	0x0092, r26	; 0x800092 <millis_timer_overflow_count+0x2>
     e5a:	b0 93 93 00 	sts	0x0093, r27	; 0x800093 <millis_timer_overflow_count+0x3>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:168

//MICROSECONDS_PER_MILLIS_OVERFLOW=2048
//MILLIS_INC=2
//FRACT_INC=6
//FRACT_MAX=125
}
     e5e:	bf 91       	pop	r27
     e60:	af 91       	pop	r26
     e62:	9f 91       	pop	r25
     e64:	8f 91       	pop	r24
     e66:	3f 91       	pop	r19
     e68:	2f 91       	pop	r18
     e6a:	0f 90       	pop	r0
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	0f 90       	pop	r0
     e70:	1f 90       	pop	r1
     e72:	18 95       	reti
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:156
  m += 1;
    m += MILLIS_INC;
  }
  else
  {
    m += MILLIS_INC;
     e74:	02 96       	adiw	r24, 0x02	; 2
     e76:	a1 1d       	adc	r26, r1
     e78:	b1 1d       	adc	r27, r1
     e7a:	d4 cf       	rjmp	.-88     	; 0xe24 <__vector_5+0x3c>

00000e7c <__vector_9>:
__vector_9():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:160
  bitClear(PORTB, 3);
  tmrval1 = TCNT1;
}

//ISR(TIMER1_OVF_vect){
ISR(TIMER1_COMPB_vect){
     e7c:	1f 92       	push	r1
     e7e:	0f 92       	push	r0
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	8f 93       	push	r24
     e88:	9f 93       	push	r25
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:162
  //clear pin
  bitSet(PORTB, 3);
     e8a:	c3 9a       	sbi	0x18, 3	; 24
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:163
  tmrval = TCNT1;
     e8c:	8f b5       	in	r24, 0x2f	; 47
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <tmrval+0x1>
     e94:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <tmrval>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:164
}
     e98:	9f 91       	pop	r25
     e9a:	8f 91       	pop	r24
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <__vector_3>:
__vector_3():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:153
  oled.clear(); //clear invisible frame
  
}


ISR(TIMER1_COMPA_vect){
     ea6:	1f 92       	push	r1
     ea8:	0f 92       	push	r0
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	0f 92       	push	r0
     eae:	11 24       	eor	r1, r1
     eb0:	8f 93       	push	r24
     eb2:	9f 93       	push	r25
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:155
  // set pin
  bitClear(PORTB, 3);
     eb4:	c3 98       	cbi	0x18, 3	; 24
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:156
  tmrval1 = TCNT1;
     eb6:	8f b5       	in	r24, 0x2f	; 47
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <tmrval1+0x1>
     ebe:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <tmrval1>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:157
}
     ec2:	9f 91       	pop	r25
     ec4:	8f 91       	pop	r24
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	0f 90       	pop	r0
     ecc:	1f 90       	pop	r1
     ece:	18 95       	reti

00000ed0 <main>:
main():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/main.cpp:6
#include <Arduino.h>

int main(void)
{
  #ifdef TUNED_OSCCAL_VALUE
  OSCCAL = TUNED_OSCCAL_VALUE; //set the oscillator calibration value based on the pins_arduino.h file. If this is not set, it will be optimised away
     ed0:	81 b7       	in	r24, 0x31	; 49
     ed2:	81 bf       	out	0x31, r24	; 49
init():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:802
  #endif
  #endif

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0) && defined(WGM01)
  sbi(TCCR0A, WGM01);
     ed4:	8a b5       	in	r24, 0x2a	; 42
     ed6:	82 60       	ori	r24, 0x02	; 2
     ed8:	8a bd       	out	0x2a, r24	; 42
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:803
  sbi(TCCR0A, WGM00);
     eda:	8a b5       	in	r24, 0x2a	; 42
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	8a bd       	out	0x2a, r24	; 42
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:826
  #endif

  // Millis timer is always processor clock divided by MillisTimer_Prescale_Value (64)
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
   #ifdef TCCR0B
    TCCR0B = (TCCR0B & ~((1<<CS02)|(1<<CS01)|(1<<CS00))) | (MillisTimer_Prescale_Index << CS00);
     ee0:	83 b7       	in	r24, 0x33	; 51
     ee2:	88 7f       	andi	r24, 0xF8	; 248
     ee4:	83 60       	ori	r24, 0x03	; 3
     ee6:	83 bf       	out	0x33, r24	; 51
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:838
  TCCR1B = (TCCR1B & ~((1<<CS13)|(1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #elif (TIMER_TO_USE_FOR_MILLIS == 1)
  TCCR1B = (TCCR1B & ~((1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #endif
  // this needs to be called before setup() or some functions won't work there
  sei();
     ee8:	78 94       	sei
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:842

  // Enable the overlow interrupt (this is the basic system tic-toc for millis)
  #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  sbi(TIMSK, TOIE0);
     eea:	89 b7       	in	r24, 0x39	; 57
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:504
  TCCR0B |= (ToneTimer_Prescale_Index << CS00);
  #elif defined(__AVR_ATtiny43__)
  TCCR1A = 3; //WGM 10=1, WGM11=1
  TCCR1B = 3; //prescaler of 64
  #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1)
  TCCR1 &= ~((1<<CS13) | (1<<CS12) | (1<<CS11) | (1<<CS10)); //stop the clock to configure
     ef0:	80 b7       	in	r24, 0x30	; 48
     ef2:	80 7f       	andi	r24, 0xF0	; 240
     ef4:	80 bf       	out	0x30, r24	; 48
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:506
  // Use the Tone Timer for fast PWM as phase correct not supported by this timer
  sbi(TCCR1, CTC1);
     ef6:	80 b7       	in	r24, 0x30	; 48
     ef8:	80 68       	ori	r24, 0x80	; 128
     efa:	80 bf       	out	0x30, r24	; 48
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:508
  //#if !defined(__AVR_ATtiny85__)
  sbi(TCCR1, PWM1A); //for the tiny 85, Timer0 is used instead.
     efc:	80 b7       	in	r24, 0x30	; 48
     efe:	80 64       	ori	r24, 0x40	; 64
     f00:	80 bf       	out	0x30, r24	; 48
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:510
  //#endif
  sbi(GTCCR, PWM1B);
     f02:	8c b5       	in	r24, 0x2c	; 44
     f04:	80 64       	ori	r24, 0x40	; 64
     f06:	8c bd       	out	0x2c, r24	; 44
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:511
  OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	8d bd       	out	0x2d, r24	; 45
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:512
  TCCR1 |= (ToneTimer_Prescale_Index << CS10);
     f0c:	80 b7       	in	r24, 0x30	; 48
     f0e:	87 60       	ori	r24, 0x07	; 7
     f10:	80 bf       	out	0x30, r24	; 48
init():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:862

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
  #if defined(ADCSRA)
    // set a2d prescale factor
  ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
     f12:	86 b1       	in	r24, 0x06	; 6
     f14:	88 77       	andi	r24, 0x78	; 120
     f16:	86 68       	ori	r24, 0x86	; 134
     f18:	86 b9       	out	0x06, r24	; 6
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/wiring.c:864
    // enable a2d conversions
    sbi(ADCSRA, ADEN);
     f1a:	37 9a       	sbi	0x06, 7	; 6
setup():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:109
uint16_t tmrval=0;
uint16_t tmrval1=0;

void setup() {
  //disable mosfet
  bitClear(PORTB, 3);
     f1c:	c3 98       	cbi	0x18, 3	; 24
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:110
  bitSet(DDRB, 3);
     f1e:	bb 9a       	sbi	0x17, 3	; 23
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:113
  // set the timer

  cli();
     f20:	f8 94       	cli
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:114
  TCCR1 = (1<<CS13) | (1<<CS11) ; // Fast PWM mode (value 3)
     f22:	8a e0       	ldi	r24, 0x0A	; 10
     f24:	80 bf       	out	0x30, r24	; 48
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:116
  //TCCR0B = (0<<WGM02) | (1<<CS02) | (0<<CS01) | (0<<CS00); // Speed (value 3)
  TIMSK |= (1<<OCIE1A) | (1<<OCIE1B) ;//(1<<TOIE1); // enable compare match and overflow interrupts
     f26:	89 b7       	in	r24, 0x39	; 57
     f28:	80 66       	ori	r24, 0x60	; 96
     f2a:	89 bf       	out	0x39, r24	; 57
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:117
  sei();
     f2c:	78 94       	sei
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:119
  
  OCR1A = 50; // value to test
     f2e:	82 e3       	ldi	r24, 0x32	; 50
     f30:	8e bd       	out	0x2e, r24	; 46
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:120
  OCR1B = 254; // value to test
     f32:	8e ef       	ldi	r24, 0xFE	; 254
     f34:	8b bd       	out	0x2b, r24	; 43
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:123

  // configure ADC
  ADMUX =
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	87 b9       	out	0x07, r24	; 7
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:132
           (0 << REFS0) |     // Sets ref. voltage to VCC
           (0 << MUX3)  |     // use ADC2 for input (PB4)
           (0 << MUX2)  |     // use ADC2 for input (PB4)
           (1 << MUX1)  |     // use ADC2 for input (PB4)
           (0 << MUX0);       // use ADC2 for input (PB4)
 ADCSRA = 
     f3a:	87 e8       	ldi	r24, 0x87	; 135
     f3c:	86 b9       	out	0x06, r24	; 6
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:139
           (1 << ADPS2) |     // set prescaler to 64, bit 2 
           (1 << ADPS1) |     // set prescaler to 64, bit 1 
           (1 << ADPS0);      // set prescaler to 64, bit 0 


  ADCSRA |= (1 << ADSC); // start first conversion
     f3e:	36 9a       	sbi	0x06, 6	; 6
setFont():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:165
	}
	ssd1306_send_stop();
}

void SSD1306Device::setFont(const DCfont *font) {
	oledFont = font;
     f40:	8a e6       	ldi	r24, 0x6A	; 106
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <oledFont+0x1>
     f48:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <oledFont>
ssd1306_begin():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:57
static void (*wireBeginTransmissionFn)(uint8_t i2c_address);
static bool (*wireWriteFn)(uint8_t byte);
static void (*wireEndTransmissionFn)(void);

static void ssd1306_begin(void) {
	wireBeginFn();
     f4c:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <wireBeginFn>
     f50:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <wireBeginFn+0x1>
     f54:	09 95       	icall
begin():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:157
}

void SSD1306Device::begin(uint8_t init_sequence_length, const uint8_t init_sequence []) {
	ssd1306_begin();

	ssd1306_send_command_start();
     f56:	07 dd       	rcall	.-1522   	; 0x966 <ssd1306_send_command_start()>
     f58:	c2 ee       	ldi	r28, 0xE2	; 226
     f5a:	d6 e0       	ldi	r29, 0x06	; 6
     f5c:	8a ee       	ldi	r24, 0xEA	; 234
     f5e:	e8 2e       	mov	r14, r24
     f60:	86 e0       	ldi	r24, 0x06	; 6
     f62:	f8 2e       	mov	r15, r24
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:159
	for (uint8_t i = 0; i < init_sequence_length; i++) {
		ssd1306_send_command_byte(pgm_read_byte(&init_sequence[i]));
     f64:	fe 01       	movw	r30, r28
     f66:	14 91       	lpm	r17, Z
ssd1306_send_command_byte():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:83
	ssd1306_send_start(i2c_address);
	ssd1306_send_byte(SSD1306_DATA);
}

static void ssd1306_send_command_byte(uint8_t byte) {
	if (ssd1306_send_byte(byte) == 0) {
     f68:	81 2f       	mov	r24, r17
     f6a:	e3 dc       	rcall	.-1594   	; 0x932 <ssd1306_send_byte(unsigned char)>
     f6c:	81 11       	cpse	r24, r1
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <main+0xa8>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:84
		ssd1306_send_stop();
     f70:	db dc       	rcall	.-1610   	; 0x928 <ssd1306_send_stop()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:85
		ssd1306_send_command_start();
     f72:	f9 dc       	rcall	.-1550   	; 0x966 <ssd1306_send_command_start()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:86
		ssd1306_send_byte(byte);
     f74:	81 2f       	mov	r24, r17
     f76:	dd dc       	rcall	.-1606   	; 0x932 <ssd1306_send_byte(unsigned char)>
     f78:	21 96       	adiw	r28, 0x01	; 1
begin():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:158

void SSD1306Device::begin(uint8_t init_sequence_length, const uint8_t init_sequence []) {
	ssd1306_begin();

	ssd1306_send_command_start();
	for (uint8_t i = 0; i < init_sequence_length; i++) {
     f7a:	ec 16       	cp	r14, r28
     f7c:	fd 06       	cpc	r15, r29
     f7e:	91 f7       	brne	.-28     	; 0xf64 <main+0x94>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:161
		ssd1306_send_command_byte(pgm_read_byte(&init_sequence[i]));
	}
	ssd1306_send_stop();
     f80:	d3 dc       	rcall	.-1626   	; 0x928 <ssd1306_send_stop()>
clear():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:175
	oledX = x;
	oledY = y;
}

void SSD1306Device::clear(void) {
	fill(0x00);
     f82:	4b dd       	rcall	.-1386   	; 0xa1a <SSD1306Device::fill(unsigned char) [clone .constprop.13]>
setup():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:144

  oled.setFont(FONT8X16);
  oled.begin();
  oled.clear();
  draw_Bat(0); // prefill byffer with empty battery bitmap
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	eb dd       	rcall	.-1066   	; 0xb5e <draw_Bat(unsigned char)>
ssd1306_send_command():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:99
		ssd1306_send_byte(byte);
	}
}

static void ssd1306_send_command(uint8_t command) {
	ssd1306_send_command_start();
     f88:	ee dc       	rcall	.-1572   	; 0x966 <ssd1306_send_command_start()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:100
	ssd1306_send_byte(command);
     f8a:	8f ea       	ldi	r24, 0xAF	; 175
     f8c:	d2 dc       	rcall	.-1628   	; 0x932 <ssd1306_send_byte(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:101
	ssd1306_send_stop();
     f8e:	cc dc       	rcall	.-1640   	; 0x928 <ssd1306_send_stop()>
switchRenderFrame():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:304
}

// Double Buffering Commands

void SSD1306Device::switchRenderFrame(void) {
	renderingFrame ^= 0x04;
     f90:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <renderingFrame>
     f94:	94 e0       	ldi	r25, 0x04	; 4
     f96:	89 27       	eor	r24, r25
     f98:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <renderingFrame>
setup():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:147
  oled.on();
  oled.switchRenderFrame();
  delay(50);
     f9c:	62 e3       	ldi	r22, 0x32	; 50
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	97 dc       	rcall	.-1746   	; 0x8d4 <delay>
clear():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:175
	oledX = x;
	oledY = y;
}

void SSD1306Device::clear(void) {
	fill(0x00);
     fa6:	39 dd       	rcall	.-1422   	; 0xa1a <SSD1306Device::fill(unsigned char) [clone .constprop.13]>
main():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:176
	uint8_t high = ADCH;
	return (high<<8) | low;
}

void loop() {  
  for(uint8_t i=0;i<7;i++){
     fa8:	c0 e0       	ldi	r28, 0x00	; 0
switchRenderFrame():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:304
}

// Double Buffering Commands

void SSD1306Device::switchRenderFrame(void) {
	renderingFrame ^= 0x04;
     faa:	14 e0       	ldi	r17, 0x04	; 4
loop():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:177
	oled.bitmap(128-32,0,32,4,stateOK);
     fac:	4a e6       	ldi	r20, 0x6A	; 106
     fae:	57 e0       	ldi	r21, 0x07	; 7
     fb0:	60 e2       	ldi	r22, 0x20	; 32
     fb2:	80 e6       	ldi	r24, 0x60	; 96
     fb4:	ff dc       	rcall	.-1538   	; 0x9b4 <SSD1306Device::bitmap(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char const*) [clone .constprop.16]>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:178
	draw_Bat(i);
     fb6:	8c 2f       	mov	r24, r28
     fb8:	d2 dd       	rcall	.-1116   	; 0xb5e <draw_Bat(unsigned char)>
switchDisplayFrame():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:308
}

void SSD1306Device::switchDisplayFrame(void) {
	drawingFrame ^= 0x20;
     fba:	d0 91 60 00 	lds	r29, 0x0060	; 0x800060 <__data_start>
     fbe:	80 e2       	ldi	r24, 0x20	; 32
     fc0:	d8 27       	eor	r29, r24
     fc2:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <__data_start>
ssd1306_send_command():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:99
		ssd1306_send_byte(byte);
	}
}

static void ssd1306_send_command(uint8_t command) {
	ssd1306_send_command_start();
     fc6:	cf dc       	rcall	.-1634   	; 0x966 <ssd1306_send_command_start()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:100
	ssd1306_send_byte(command);
     fc8:	8d 2f       	mov	r24, r29
     fca:	b3 dc       	rcall	.-1690   	; 0x932 <ssd1306_send_byte(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:101
	ssd1306_send_stop();
     fcc:	ad dc       	rcall	.-1702   	; 0x928 <ssd1306_send_stop()>
switchRenderFrame():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:304
}

// Double Buffering Commands

void SSD1306Device::switchRenderFrame(void) {
	renderingFrame ^= 0x04;
     fce:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <renderingFrame>
     fd2:	81 27       	eor	r24, r17
     fd4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <renderingFrame>
loop():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:181
  //delay(10);
	oled.switchFrame();
	delay(300);
     fd8:	6c e2       	ldi	r22, 0x2C	; 44
     fda:	71 e0       	ldi	r23, 0x01	; 1
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	79 dc       	rcall	.-1806   	; 0x8d4 <delay>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:176
	uint8_t high = ADCH;
	return (high<<8) | low;
}

void loop() {  
  for(uint8_t i=0;i<7;i++){
     fe2:	cf 5f       	subi	r28, 0xFF	; 255
     fe4:	c7 30       	cpi	r28, 0x07	; 7
     fe6:	11 f7       	brne	.-60     	; 0xfac <main+0xdc>
switchRenderFrame():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:304
     fe8:	14 e0       	ldi	r17, 0x04	; 4
loop():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:184
  //delay(10);
	oled.switchFrame();
	delay(300);
  }
  for(uint8_t i=7;i>0;i--){
	oled.bitmap(128-32,0,32,4,stateDANGER);
     fea:	4a ee       	ldi	r20, 0xEA	; 234
     fec:	56 e0       	ldi	r21, 0x06	; 6
     fee:	60 e2       	ldi	r22, 0x20	; 32
     ff0:	80 e6       	ldi	r24, 0x60	; 96
     ff2:	e0 dc       	rcall	.-1600   	; 0x9b4 <SSD1306Device::bitmap(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char const*) [clone .constprop.16]>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:185
	draw_Bat(i-1);
     ff4:	c1 50       	subi	r28, 0x01	; 1
     ff6:	8c 2f       	mov	r24, r28
     ff8:	b2 dd       	rcall	.-1180   	; 0xb5e <draw_Bat(unsigned char)>
switchDisplayFrame():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:308
}

void SSD1306Device::switchDisplayFrame(void) {
	drawingFrame ^= 0x20;
     ffa:	d0 91 60 00 	lds	r29, 0x0060	; 0x800060 <__data_start>
     ffe:	80 e2       	ldi	r24, 0x20	; 32
    1000:	d8 27       	eor	r29, r24
    1002:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <__data_start>
ssd1306_send_command():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:99
		ssd1306_send_byte(byte);
	}
}

static void ssd1306_send_command(uint8_t command) {
	ssd1306_send_command_start();
    1006:	af dc       	rcall	.-1698   	; 0x966 <ssd1306_send_command_start()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:100
	ssd1306_send_byte(command);
    1008:	8d 2f       	mov	r24, r29
    100a:	93 dc       	rcall	.-1754   	; 0x932 <ssd1306_send_byte(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:101
	ssd1306_send_stop();
    100c:	8d dc       	rcall	.-1766   	; 0x928 <ssd1306_send_stop()>
switchRenderFrame():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:304
}

// Double Buffering Commands

void SSD1306Device::switchRenderFrame(void) {
	renderingFrame ^= 0x04;
    100e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <renderingFrame>
    1012:	81 27       	eor	r24, r17
    1014:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <renderingFrame>
loop():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:188
  //delay(10);
	oled.switchFrame();
	delay(300);
    1018:	6c e2       	ldi	r22, 0x2C	; 44
    101a:	71 e0       	ldi	r23, 0x01	; 1
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	59 dc       	rcall	.-1870   	; 0x8d4 <delay>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:183
	draw_Bat(i);
  //delay(10);
	oled.switchFrame();
	delay(300);
  }
  for(uint8_t i=7;i>0;i--){
    1022:	c1 11       	cpse	r28, r1
    1024:	e2 cf       	rjmp	.-60     	; 0xfea <main+0x11a>
switchDisplayFrame():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:308
}

void SSD1306Device::switchDisplayFrame(void) {
	drawingFrame ^= 0x20;
    1026:	10 e2       	ldi	r17, 0x20	; 32
switchRenderFrame():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:304
}

// Double Buffering Commands

void SSD1306Device::switchRenderFrame(void) {
	renderingFrame ^= 0x04;
    1028:	d4 e0       	ldi	r29, 0x04	; 4
readADC():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:167
  bitSet(PORTB, 3);
  tmrval = TCNT1;
}

uint16_t readADC(void){
	while (bit_is_set(ADCSRA,ADSC)); // wait for any previous conversion
    102a:	36 99       	sbic	0x06, 6	; 6
    102c:	fe cf       	rjmp	.-4      	; 0x102a <main+0x15a>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:168
	ADCSRA |= (1 << ADSC); // start new conversion
    102e:	36 9a       	sbi	0x06, 6	; 6
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:169
	while (bit_is_set(ADCSRA,ADSC)); // wait for current conversion to complete
    1030:	36 99       	sbic	0x06, 6	; 6
    1032:	fe cf       	rjmp	.-4      	; 0x1030 <main+0x160>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:170
	uint8_t low  = ADCL; // must read ADCL first
    1034:	84 b1       	in	r24, 0x04	; 4
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:171
	uint8_t high = ADCH;
    1036:	85 b1       	in	r24, 0x05	; 5
clear():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:175
	oledX = x;
	oledY = y;
}

void SSD1306Device::clear(void) {
	fill(0x00);
    1038:	f0 dc       	rcall	.-1568   	; 0xa1a <SSD1306Device::fill(unsigned char) [clone .constprop.13]>
print():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:73
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    103a:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <tmrval>
    103e:	70 91 9b 00 	lds	r23, 0x009B	; 0x80009b <tmrval+0x1>
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1046:	4a e0       	ldi	r20, 0x0A	; 10
    1048:	cd dd       	rcall	.-1126   	; 0xbe4 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.3]>
loop():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:195
  while(1){

    uint16_t rawadc = readADC();
    oled.clear();
    oled.print(tmrval);
    oled.setCursor(0,2);
    104a:	62 e0       	ldi	r22, 0x02	; 2
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	94 dc       	rcall	.-1752   	; 0x978 <SSD1306Device::setCursor(unsigned char, unsigned char) [clone .constprop.17]>
print():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:73
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1050:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <tmrval1>
    1054:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <tmrval1+0x1>
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    105c:	4a e0       	ldi	r20, 0x0A	; 10
    105e:	c2 dd       	rcall	.-1148   	; 0xbe4 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.3]>
loop():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:197
    oled.print(tmrval1);
    tmrval=0;
    1060:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <tmrval+0x1>
    1064:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <tmrval>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:198
    tmrval1=0;
    1068:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <tmrval1+0x1>
    106c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <tmrval1>
switchDisplayFrame():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:308
void SSD1306Device::switchRenderFrame(void) {
	renderingFrame ^= 0x04;
}

void SSD1306Device::switchDisplayFrame(void) {
	drawingFrame ^= 0x20;
    1070:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__data_start>
    1074:	c1 27       	eor	r28, r17
    1076:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__data_start>
ssd1306_send_command():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:99
		ssd1306_send_byte(byte);
	}
}

static void ssd1306_send_command(uint8_t command) {
	ssd1306_send_command_start();
    107a:	75 dc       	rcall	.-1814   	; 0x966 <ssd1306_send_command_start()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:100
	ssd1306_send_byte(command);
    107c:	8c 2f       	mov	r24, r28
    107e:	59 dc       	rcall	.-1870   	; 0x932 <ssd1306_send_byte(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:101
	ssd1306_send_stop();
    1080:	53 dc       	rcall	.-1882   	; 0x928 <ssd1306_send_stop()>
switchRenderFrame():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:304
}

// Double Buffering Commands

void SSD1306Device::switchRenderFrame(void) {
	renderingFrame ^= 0x04;
    1082:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <renderingFrame>
    1086:	8d 27       	eor	r24, r29
    1088:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <renderingFrame>
loop():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:202
    //draw_Bat(getbatIndicatorVal(rawadc));
    oled.switchFrame();
  // Write text to oled RAM (which is not currently being displayed).
    delay(500);
    108c:	64 ef       	ldi	r22, 0xF4	; 244
    108e:	71 e0       	ldi	r23, 0x01	; 1
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	1f dc       	rcall	.-1986   	; 0x8d4 <delay>
    1096:	c9 cf       	rjmp	.-110    	; 0x102a <main+0x15a>

00001098 <_GLOBAL__sub_I_oled>:
_ZN5PrintC2Ev():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.1\cores\tiny/Print.h:75
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1098:	ec e9       	ldi	r30, 0x9C	; 156
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	13 82       	std	Z+3, r1	; 0x03
    109e:	12 82       	std	Z+2, r1	; 0x02
__base_ctor ():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:142
	ssd1306_send_byte(command6);
	ssd1306_send_byte(command7);
	ssd1306_send_stop();
}

SSD1306Device::SSD1306Device(uint8_t ssd1306_i2c_address, void (*wireBeginFunc)(void), void (*wireBeginTransmissionFunc)(uint8_t ssd1306_i2c_address), bool (*wireWriteFunc)(uint8_t byte), void (*wireEndTransmissionFunc)(void)) {
    10a0:	86 e6       	ldi	r24, 0x66	; 102
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	80 83       	st	Z, r24
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:143
	i2c_address = ssd1306_i2c_address;
    10a8:	8c e3       	ldi	r24, 0x3C	; 60
    10aa:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <i2c_address>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:144
	wireBeginFn = wireBeginFunc;
    10ae:	87 ee       	ldi	r24, 0xE7	; 231
    10b0:	95 e0       	ldi	r25, 0x05	; 5
    10b2:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <wireBeginFn+0x1>
    10b6:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <wireBeginFn>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:145
	wireBeginTransmissionFn = wireBeginTransmissionFunc;
    10ba:	81 ee       	ldi	r24, 0xE1	; 225
    10bc:	95 e0       	ldi	r25, 0x05	; 5
    10be:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <wireBeginTransmissionFn+0x1>
    10c2:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <wireBeginTransmissionFn>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:146
	wireWriteFn = wireWriteFunc;
    10c6:	82 ed       	ldi	r24, 0xD2	; 210
    10c8:	95 e0       	ldi	r25, 0x05	; 5
    10ca:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <wireWriteFn+0x1>
    10ce:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <wireWriteFn>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:147
	wireEndTransmissionFn = wireEndTransmissionFunc;
    10d2:	85 e7       	ldi	r24, 0x75	; 117
    10d4:	96 e0       	ldi	r25, 0x06	; 6
    10d6:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <wireEndTransmissionFn+0x1>
    10da:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <wireEndTransmissionFn>
_GLOBAL__sub_I_oled():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:204
  }
}
    10de:	08 95       	ret

000010e0 <__mulqi3>:
__mulqi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:224
    10e0:	00 24       	eor	r0, r0

000010e2 <__mulqi3_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:226
    10e2:	80 fd       	sbrc	r24, 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:227
    10e4:	06 0e       	add	r0, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:228
    10e6:	66 0f       	add	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:229
    10e8:	11 f0       	breq	.+4      	; 0x10ee <__mulqi3_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:230
    10ea:	86 95       	lsr	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:231
    10ec:	d1 f7       	brne	.-12     	; 0x10e2 <__mulqi3_loop>

000010ee <__mulqi3_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:233
    10ee:	80 2d       	mov	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:234
    10f0:	08 95       	ret

000010f2 <__mulhi3>:
__mulhi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:312
    10f2:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:313
    10f4:	55 27       	eor	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:314
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <__mulhi3+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:317
    10f8:	08 0e       	add	r0, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:318
    10fa:	59 1f       	adc	r21, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:320
    10fc:	88 0f       	add	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:321
    10fe:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:324
    1100:	00 97       	sbiw	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:325
    1102:	29 f0       	breq	.+10     	; 0x110e <__mulhi3+0x1c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:328
    1104:	76 95       	lsr	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:329
    1106:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:331
    1108:	b8 f3       	brcs	.-18     	; 0x10f8 <__mulhi3+0x6>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:335
    110a:	71 05       	cpc	r23, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:337
    110c:	b9 f7       	brne	.-18     	; 0x10fc <__mulhi3+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:340
    110e:	80 2d       	mov	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:341
    1110:	95 2f       	mov	r25, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:342
    1112:	08 95       	ret

00001114 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1114:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1116:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1118:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    111a:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    111c:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    111e:	0d c0       	rjmp	.+26     	; 0x113a <__udivmodsi4_ep>

00001120 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1120:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1122:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1124:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1126:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1128:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    112a:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    112c:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    112e:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1130:	20 f0       	brcs	.+8      	; 0x113a <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1132:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1134:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1136:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1138:	f5 0b       	sbc	r31, r21

0000113a <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    113a:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    113c:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    113e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1140:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1142:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1144:	69 f7       	brne	.-38     	; 0x1120 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1146:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1148:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    114a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    114c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    114e:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1150:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1152:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1154:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1156:	08 95       	ret

00001158 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1158:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    115a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    115c:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    115e:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1160:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1162:	09 94       	ijmp

00001164 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1164:	f8 94       	cli

00001166 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1166:	ff cf       	rjmp	.-2      	; 0x1166 <__stop_program>
