
C:\Users\Pavel\AppData\Local\Temp\arduino_build_120025/diychainsaw.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0f c0       	rjmp	.+30     	; 0x20 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	19 c3       	rjmp	.+1586   	; 0x63a <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c2       	rjmp	.+1118   	; 0x46a <__vector_5>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	08 c3       	rjmp	.+1552   	; 0x624 <__vector_9>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	eb c2       	rjmp	.+1494   	; 0x5f2 <__vector_13>
  1c:	70 c2       	rjmp	.+1248   	; 0x4fe <__vector_14>

0000001e <__ctors_start>:
__trampolines_start():
  1e:	17 04       	cpc	r1, r7

00000020 <__ctors_end>:
__dtors_end():
  20:	11 24       	eor	r1, r1
  22:	1f be       	out	0x3f, r1	; 63
  24:	cf e5       	ldi	r28, 0x5F	; 95
  26:	d2 e0       	ldi	r29, 0x02	; 2
  28:	de bf       	out	0x3e, r29	; 62
  2a:	cd bf       	out	0x3d, r28	; 61

0000002c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  2c:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  2e:	a8 e6       	ldi	r26, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  30:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  32:	01 c0       	rjmp	.+2      	; 0x36 <.do_clear_bss_start>

00000034 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  34:	1d 92       	st	X+, r1

00000036 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  36:	a8 3a       	cpi	r26, 0xA8	; 168
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  38:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  3a:	e1 f7       	brne	.-8      	; 0x34 <.do_clear_bss_loop>

0000003c <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  3c:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  3e:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  40:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  42:	e4 e7       	ldi	r30, 0x74	; 116
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  44:	f8 e0       	ldi	r31, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  46:	02 c0       	rjmp	.+4      	; 0x4c <__SREG__+0xd>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  48:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  4a:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  4c:	a8 36       	cpi	r26, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  4e:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  50:	d9 f7       	brne	.-10     	; 0x48 <__SREG__+0x9>

00000052 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
  52:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
  54:	c0 e1       	ldi	r28, 0x10	; 16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
  56:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
  58:	03 c0       	rjmp	.+6      	; 0x60 <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
  5a:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
  5c:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
  5e:	02 d4       	rcall	.+2052   	; 0x864 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
  60:	cf 30       	cpi	r28, 0x0F	; 15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
  62:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
  64:	d1 f7       	brne	.-12     	; 0x5a <__do_global_ctors+0x8>
  66:	f4 d2       	rcall	.+1512   	; 0x650 <main>
  68:	03 c4       	rjmp	.+2054   	; 0x870 <_exit>

0000006a <__bad_interrupt>:
__vector_1():
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  6c:	cf 92       	push	r12
  6e:	df 92       	push	r13
  70:	ef 92       	push	r14
  72:	ff 92       	push	r15
  74:	0f 93       	push	r16
  76:	1f 93       	push	r17
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	6c 01       	movw	r12, r24
  7e:	eb 01       	movw	r28, r22
  80:	7b 01       	movw	r14, r22
  82:	e4 0e       	add	r14, r20
  84:	f5 1e       	adc	r15, r21
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/Print.cpp:35
  size_t n = 0;
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/Print.cpp:36
  while (size--) {
  8a:	ce 15       	cp	r28, r14
  8c:	df 05       	cpc	r29, r15
  8e:	61 f0       	breq	.+24     	; 0xa8 <Print::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/Print.cpp:37
    n += write(*buffer++);
  90:	69 91       	ld	r22, Y+
  92:	d6 01       	movw	r26, r12
  94:	ed 91       	ld	r30, X+
  96:	fc 91       	ld	r31, X
  98:	01 90       	ld	r0, Z+
  9a:	f0 81       	ld	r31, Z
  9c:	e0 2d       	mov	r30, r0
  9e:	c6 01       	movw	r24, r12
  a0:	09 95       	icall
  a2:	08 0f       	add	r16, r24
  a4:	19 1f       	adc	r17, r25
  a6:	f1 cf       	rjmp	.-30     	; 0x8a <Print::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/Print.cpp:40
  }
  return n;
}
  a8:	c8 01       	movw	r24, r16
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	1f 91       	pop	r17
  b0:	0f 91       	pop	r16
  b2:	ff 90       	pop	r15
  b4:	ef 90       	pop	r14
  b6:	df 90       	pop	r13
  b8:	cf 90       	pop	r12
  ba:	08 95       	ret

000000bc <micros>:
micros():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:190
}

unsigned long micros()
{
  unsigned long m;
  uint8_t oldSREG = SREG, t;
  bc:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:192

  cli();
  be:	f8 94       	cli
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:193
  m = millis_timer_overflow_count;
  c0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <millis_timer_overflow_count>
  c4:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <millis_timer_overflow_count+0x1>
  c8:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <millis_timer_overflow_count+0x2>
  cc:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <millis_timer_overflow_count+0x3>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:195
#if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
  t = TCNT0;
  d0:	22 b7       	in	r18, 0x32	; 50
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:210

#if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    m++;
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR & _BV(TOV0)) && (t < 255))
  d2:	08 b6       	in	r0, 0x38	; 56
  d4:	01 fe       	sbrs	r0, 1
  d6:	05 c0       	rjmp	.+10     	; 0xe2 <micros+0x26>
  d8:	2f 3f       	cpi	r18, 0xFF	; 255
  da:	19 f0       	breq	.+6      	; 0xe2 <micros+0x26>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:211
    m++;
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	a1 1d       	adc	r26, r1
  e0:	b1 1d       	adc	r27, r1
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:220
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
  if ((TIFR & _BV(TOV1)) && (t < 255))
    m++;
#endif

  SREG = oldSREG;
  e2:	3f bf       	out	0x3f, r19	; 63
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:227

#if F_CPU < 1000000L
  return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
#else
#if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 ) // Can we just do it the naive way? If so great!
  return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
  e4:	ba 2f       	mov	r27, r26
  e6:	a9 2f       	mov	r26, r25
  e8:	98 2f       	mov	r25, r24
  ea:	88 27       	eor	r24, r24
  ec:	bc 01       	movw	r22, r24
  ee:	cd 01       	movw	r24, r26
  f0:	62 0f       	add	r22, r18
  f2:	71 1d       	adc	r23, r1
  f4:	81 1d       	adc	r24, r1
  f6:	91 1d       	adc	r25, r1
  f8:	43 e0       	ldi	r20, 0x03	; 3
  fa:	66 0f       	add	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	88 1f       	adc	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	4a 95       	dec	r20
 104:	d1 f7       	brne	.-12     	; 0xfa <micros+0x3e>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:270
  //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
  //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
  return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
#endif
#endif
}
 106:	08 95       	ret

00000108 <delay>:
delay():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:280
  // Empty
}
void yield(void) __attribute__ ((weak, alias("__empty")));

void delay(unsigned long ms)
{
 108:	cf 92       	push	r12
 10a:	df 92       	push	r13
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	6b 01       	movw	r12, r22
 116:	7c 01       	movw	r14, r24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:282
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();
 118:	d1 df       	rcall	.-94     	; 0xbc <micros>
 11a:	eb 01       	movw	r28, r22
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:286

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
 11c:	cf df       	rcall	.-98     	; 0xbc <micros>
 11e:	6c 1b       	sub	r22, r28
 120:	7d 0b       	sbc	r23, r29
 122:	68 3e       	cpi	r22, 0xE8	; 232
 124:	73 40       	sbci	r23, 0x03	; 3
 126:	a0 f0       	brcs	.+40     	; 0x150 <delay+0x48>
 128:	c1 14       	cp	r12, r1
 12a:	d1 04       	cpc	r13, r1
 12c:	e1 04       	cpc	r14, r1
 12e:	f1 04       	cpc	r15, r1
 130:	39 f4       	brne	.+14     	; 0x140 <delay+0x38>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:296
  #else
  uint32_t start = millis();
  while((millis() - start) < ms)  /* NOP */yield();
  return;
  #endif
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	df 90       	pop	r13
 13c:	cf 90       	pop	r12
 13e:	08 95       	ret
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:287
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
      ms--;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	c8 1a       	sub	r12, r24
 144:	d1 08       	sbc	r13, r1
 146:	e1 08       	sbc	r14, r1
 148:	f1 08       	sbc	r15, r1
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:288
      start += 1000;
 14a:	c8 51       	subi	r28, 0x18	; 24
 14c:	dc 4f       	sbci	r29, 0xFC	; 252
 14e:	e6 cf       	rjmp	.-52     	; 0x11c <delay+0x14>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:284
void delay(unsigned long ms)
{
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
 150:	c1 14       	cp	r12, r1
 152:	d1 04       	cpc	r13, r1
 154:	e1 04       	cpc	r14, r1
 156:	f1 04       	cpc	r15, r1
 158:	09 f7       	brne	.-62     	; 0x11c <delay+0x14>
 15a:	eb cf       	rjmp	.-42     	; 0x132 <delay+0x2a>

0000015c <ssd1306_send_stop()>:
ssd1306_send_stop():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:70
static bool ssd1306_send_byte(uint8_t byte) {
	return wireWriteFn(byte);
}

static void ssd1306_send_stop(void) {
	wireEndTransmissionFn();
 15c:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <wireEndTransmissionFn>
 160:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <wireEndTransmissionFn+0x1>
 164:	09 94       	ijmp

00000166 <ssd1306_send_byte(unsigned char)>:
ssd1306_send_byte():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:66
static void ssd1306_send_start(void) {
	wireBeginTransmissionFn();
}

static bool ssd1306_send_byte(uint8_t byte) {
	return wireWriteFn(byte);
 166:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <wireWriteFn>
 16a:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <wireWriteFn+0x1>
 16e:	09 94       	ijmp

00000170 <ssd1306_send_start()>:
ssd1306_send_start():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:62
static void ssd1306_begin(void) {
	wireBeginFn();
}

static void ssd1306_send_start(void) {
	wireBeginTransmissionFn();
 170:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <wireBeginTransmissionFn>
 174:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <wireBeginTransmissionFn+0x1>
 178:	09 94       	ijmp

0000017a <SSD1306Device::setCursor(unsigned char, unsigned char) [clone .constprop.0]>:
setCursor():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:177

void SSD1306Device::setFont(const DCfont *font) {
	oledFont = font;
}

void SSD1306Device::setCursor(uint8_t x, uint8_t y) {
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	c8 2f       	mov	r28, r24
 180:	d6 2f       	mov	r29, r22
ssd1306_send_command_start():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:74
static void ssd1306_send_stop(void) {
	wireEndTransmissionFn();
}

static void ssd1306_send_command_start(void) {
	ssd1306_send_start();
 182:	f6 df       	rcall	.-20     	; 0x170 <ssd1306_send_start()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:75
	ssd1306_send_byte(SSD1306_COMMAND);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	ef df       	rcall	.-34     	; 0x166 <ssd1306_send_byte(unsigned char)>
setCursor():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:178
void SSD1306Device::setFont(const DCfont *font) {
	oledFont = font;
}

void SSD1306Device::setCursor(uint8_t x, uint8_t y) {
	ssd1306_send_command3(renderingFrame | (y & 0x07), 0x10 | ((x & 0xf0) >> 4), x & 0x0f);
 188:	8d 2f       	mov	r24, r29
 18a:	87 70       	andi	r24, 0x07	; 7
ssd1306_send_command3():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:114
	ssd1306_send_stop();
}

static void ssd1306_send_command3(uint8_t command1, uint8_t command2, uint8_t command3) {
	ssd1306_send_command_start();
	ssd1306_send_byte(command1);
 18c:	80 6b       	ori	r24, 0xB0	; 176
 18e:	eb df       	rcall	.-42     	; 0x166 <ssd1306_send_byte(unsigned char)>
setCursor():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:178
void SSD1306Device::setFont(const DCfont *font) {
	oledFont = font;
}

void SSD1306Device::setCursor(uint8_t x, uint8_t y) {
	ssd1306_send_command3(renderingFrame | (y & 0x07), 0x10 | ((x & 0xf0) >> 4), x & 0x0f);
 190:	8c 2f       	mov	r24, r28
 192:	82 95       	swap	r24
 194:	8f 70       	andi	r24, 0x0F	; 15
ssd1306_send_command3():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:115
}

static void ssd1306_send_command3(uint8_t command1, uint8_t command2, uint8_t command3) {
	ssd1306_send_command_start();
	ssd1306_send_byte(command1);
	ssd1306_send_byte(command2);
 196:	80 61       	ori	r24, 0x10	; 16
 198:	e6 df       	rcall	.-52     	; 0x166 <ssd1306_send_byte(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:116
	ssd1306_send_byte(command3);
 19a:	8c 2f       	mov	r24, r28
 19c:	8f 70       	andi	r24, 0x0F	; 15
 19e:	e3 df       	rcall	.-58     	; 0x166 <ssd1306_send_byte(unsigned char)>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:117
	ssd1306_send_stop();
 1a0:	dd df       	rcall	.-70     	; 0x15c <ssd1306_send_stop()>
setCursor():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:179
	oledFont = font;
}

void SSD1306Device::setCursor(uint8_t x, uint8_t y) {
	ssd1306_send_command3(renderingFrame | (y & 0x07), 0x10 | ((x & 0xf0) >> 4), x & 0x0f);
	oledX = x;
 1a2:	c0 93 a7 00 	sts	0x00A7, r28	; 0x8000a7 <oledX>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:180
	oledY = y;
 1a6:	d0 93 a6 00 	sts	0x00A6, r29	; 0x8000a6 <oledY>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:181
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <SSD1306Device::newLine(unsigned char)>:
newLine():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:196
	}
	setCursor(0, 0);
}

void SSD1306Device::newLine(uint8_t fontHeight) {
	oledY+=fontHeight;
 1b0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <oledY>
 1b4:	86 0f       	add	r24, r22
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:197
	if (oledY > oledPages - fontHeight) {
 1b6:	24 e0       	ldi	r18, 0x04	; 4
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	26 1b       	sub	r18, r22
 1bc:	31 09       	sbc	r19, r1
 1be:	82 17       	cp	r24, r18
 1c0:	13 06       	cpc	r1, r19
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <SSD1306Device::newLine(unsigned char)+0x16>
 1c4:	34 f4       	brge	.+12     	; 0x1d2 <SSD1306Device::newLine(unsigned char)+0x22>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:198
		oledY = oledPages - fontHeight;
 1c6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <oledY>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:200
	}
	setCursor(0, oledY);
 1ca:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <oledY>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	d4 cf       	rjmp	.-88     	; 0x17a <SSD1306Device::setCursor(unsigned char, unsigned char) [clone .constprop.0]>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:198
}

void SSD1306Device::newLine(uint8_t fontHeight) {
	oledY+=fontHeight;
	if (oledY > oledPages - fontHeight) {
		oledY = oledPages - fontHeight;
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	86 1b       	sub	r24, r22
 1d6:	f7 cf       	rjmp	.-18     	; 0x1c6 <SSD1306Device::newLine(unsigned char)+0x16>

000001d8 <SSD1306Device::write(unsigned char)>:
write():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:250
			}
		}
	}
	while (--line);
	return 1;
}
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	08 95       	ret

000001de <stopMotor()>:
stopMotor():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:259
  return LOW;
}

void stopMotor(){
    // make sure that motor is off
    run_state=0;
 1de:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <run_state>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:261
    // stop timer
	cli();
 1e2:	f8 94       	cli
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:262
    TCCR1 = 0;
 1e4:	10 be       	out	0x30, r1	; 48
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:263
	sei();
 1e6:	78 94       	sei
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:264
    bitClear(PORTB,3);
 1e8:	c3 98       	cbi	0x18, 3	; 24
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:265
	delay(5);
 1ea:	65 e0       	ldi	r22, 0x05	; 5
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	8a df       	rcall	.-236    	; 0x108 <delay>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:266
    bitClear(PORTB,3);  
 1f4:	c3 98       	cbi	0x18, 3	; 24
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:267
}
 1f6:	08 95       	ret

000001f8 <readADC()>:
readADC():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:207
  bitSet(PORTB, 3);
  //tmrval = TCNT1;
}

uint16_t readADC(void){
	while (bit_is_set(ADCSRA,ADSC)); // wait for any previous conversion
 1f8:	36 99       	sbic	0x06, 6	; 6
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <readADC()>
 1fc:	20 e2       	ldi	r18, 0x20	; 32
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:208
	uint16_t res32=0;
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:210
	for(uint8_t i=0;i<32;i++){
	  ADCSRA |= (1 << ADSC); // start new conversion
 202:	36 9a       	sbi	0x06, 6	; 6
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:211
	  while (bit_is_set(ADCSRA,ADSC)); // wait for current conversion to complete
 204:	36 99       	sbic	0x06, 6	; 6
 206:	fe cf       	rjmp	.-4      	; 0x204 <readADC()+0xc>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:212
	  uint8_t low  = ADCL; // must read ADCL first
 208:	34 b1       	in	r19, 0x04	; 4
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:213
	  uint8_t high = ADCH;
 20a:	45 b1       	in	r20, 0x05	; 5
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:214
    res32+=(uint16_t)((high<<8) | low);
 20c:	54 2f       	mov	r21, r20
 20e:	43 2f       	mov	r20, r19
 210:	84 0f       	add	r24, r20
 212:	95 1f       	adc	r25, r21
 214:	21 50       	subi	r18, 0x01	; 1
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:209
}

uint16_t readADC(void){
	while (bit_is_set(ADCSRA,ADSC)); // wait for any previous conversion
	uint16_t res32=0;
	for(uint8_t i=0;i<32;i++){
 216:	a9 f7       	brne	.-22     	; 0x202 <readADC()+0xa>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:217
	  uint8_t low  = ADCL; // must read ADCL first
	  uint8_t high = ADCH;
    res32+=(uint16_t)((high<<8) | low);
	}
	  return res32 /32;
}
 218:	25 e0       	ldi	r18, 0x05	; 5
 21a:	96 95       	lsr	r25
 21c:	87 95       	ror	r24
 21e:	2a 95       	dec	r18
 220:	e1 f7       	brne	.-8      	; 0x21a <readADC()+0x22>
 222:	08 95       	ret

00000224 <disableWatchdog()>:
wdt_disable():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\avr/wdt.h:510
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	a8 95       	wdr
 22a:	81 b5       	in	r24, 0x21	; 33
 22c:	88 61       	ori	r24, 0x18	; 24
 22e:	81 bd       	out	0x21, r24	; 33
 230:	11 bc       	out	0x21, r1	; 33
 232:	0f be       	out	0x3f, r0	; 63
disableWatchdog():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:131
  if(tmp == bitRead(PINB, 1)){return tmp;}else{return !tmp;}
}

void disableWatchdog(){
  wdt_disable();
}
 234:	08 95       	ret

00000236 <getButtonState()>:
getButtonState():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:123
  if(adc128>=V1S1) return 1;
  if(adc128<V1S0) return 0;
  return 0;
}

bool getButtonState(){
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:124
  bool tmp = bitRead(PINB, 1);
 23e:	86 b3       	in	r24, 0x16	; 22
 240:	c1 e0       	ldi	r28, 0x01	; 1
 242:	d8 2f       	mov	r29, r24
 244:	d2 70       	andi	r29, 0x02	; 2
 246:	81 ff       	sbrs	r24, 1
 248:	c0 e0       	ldi	r28, 0x00	; 0
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:125
  delay(10);
 24a:	6a e0       	ldi	r22, 0x0A	; 10
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	5a df       	rcall	.-332    	; 0x108 <delay>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:126
  if(tmp == bitRead(PINB, 1)){return tmp;}else{return !tmp;}
 254:	86 b3       	in	r24, 0x16	; 22
 256:	81 fb       	bst	r24, 1
 258:	00 27       	eor	r16, r16
 25a:	00 f9       	bld	r16, 0
 25c:	10 e0       	ldi	r17, 0x00	; 0
 25e:	c0 17       	cp	r28, r16
 260:	11 06       	cpc	r1, r17
 262:	19 f0       	breq	.+6      	; 0x26a <__stack+0xb>
 264:	c1 e0       	ldi	r28, 0x01	; 1
 266:	d1 11       	cpse	r29, r1
 268:	c0 e0       	ldi	r28, 0x00	; 0
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:127
}
 26a:	8c 2f       	mov	r24, r28
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	08 95       	ret

00000276 <wire_write(unsigned char)>:
write():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:498

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data) {
  if (transmitting) { // in master transmitter mode
 276:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <TwoWire::transmitting>
 27a:	99 23       	and	r25, r25
 27c:	99 f0       	breq	.+38     	; 0x2a4 <wire_write(unsigned char)+0x2e>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:500
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
 27e:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <TwoWire::BufferLength>
 282:	90 32       	cpi	r25, 0x20	; 32
 284:	38 f5       	brcc	.+78     	; 0x2d4 <wire_write(unsigned char)+0x5e>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:504
      return 0;
    }
    // put byte in tx buffer
    Buffer[BufferIndex] = data;
 286:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <TwoWire::BufferIndex>
 28a:	e9 2f       	mov	r30, r25
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	e8 59       	subi	r30, 0x98	; 152
 290:	ff 4f       	sbci	r31, 0xFF	; 255
 292:	80 83       	st	Z, r24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:505
    ++BufferIndex;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	89 0f       	add	r24, r25
 298:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <TwoWire::BufferIndex>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:507
    // update amount in buffer
    BufferLength = BufferIndex;
 29c:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <TwoWire::BufferLength>
wire_write():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:516
      return 0;
    }
    // reply to master
    USI_TWI_Transmit_Byte(data);
  }
  return 1;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	08 95       	ret
USI_TWI_Space_In_Transmission_Buffer():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
 2a4:	20 91 99 00 	lds	r18, 0x0099	; 0x800099 <TWI_TxHead>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
 2a8:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <TWI_TxTail>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
 2ac:	2f 5f       	subi	r18, 0xFF	; 255
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
 2ae:	92 1b       	sub	r25, r18
 2b0:	9f 70       	andi	r25, 0x0F	; 15
write():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:510
    ++BufferIndex;
    // update amount in buffer
    BufferLength = BufferIndex;
  } else { // in slave send mode
    // don't bother if buffer is full
    if (!USI_TWI_Space_In_Transmission_Buffer()) {
 2b2:	81 f0       	breq	.+32     	; 0x2d4 <wire_write(unsigned char)+0x5e>
USI_TWI_Transmit_Byte():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:100
// Puts data in the transmission buffer, Waits if buffer is full.
void USI_TWI_Transmit_Byte(unsigned char data)
{
  unsigned char tmphead;

  tmphead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate buffer index.
 2b4:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <TWI_TxHead>
 2b8:	9f 5f       	subi	r25, 0xFF	; 255
 2ba:	9f 70       	andi	r25, 0x0F	; 15
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:101
  while (tmphead == TWI_TxTail)
 2bc:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <TWI_TxTail>
 2c0:	92 17       	cp	r25, r18
 2c2:	e1 f3       	breq	.-8      	; 0x2bc <wire_write(unsigned char)+0x46>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:103
    ;                         // Wait for free space in buffer.
  TWI_TxBuf[tmphead] = data;    // Store data in buffer.
 2c4:	e9 2f       	mov	r30, r25
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	e8 58       	subi	r30, 0x88	; 136
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	80 83       	st	Z, r24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:104
  TWI_TxHead         = tmphead; // Store new index.
 2ce:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <TWI_TxHead>
 2d2:	e6 cf       	rjmp	.-52     	; 0x2a0 <wire_write(unsigned char)+0x2a>
wire_write():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:501
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data) {
  if (transmitting) { // in master transmitter mode
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
      return 0;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_Wire.h:41
	return true;
}

static bool wire_write(uint8_t byte) {
	return Wire.write(byte);
}
 2d6:	08 95       	ret

000002d8 <wire_beginTransmission()>:
beginTransmission():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:453
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address) {
  // indicate that we are transmitting
  transmitting = 1;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <TwoWire::transmitting>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:455
  // set address of targeted slave and write mode
  Buffer[0] = (address << TWI_ADR_BITS) | (0 << TWI_READ_BIT);
 2de:	98 e7       	ldi	r25, 0x78	; 120
 2e0:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__data_end>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:457
  // reset tx buffer iterator vars
  BufferIndex = 1; // reserved by slave address
 2e4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <TwoWire::BufferIndex>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:458
  BufferLength = BufferIndex;
 2e8:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <TwoWire::BufferLength>
wire_beginTransmission():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_Wire.h:37
}

static bool wire_beginTransmission(void) {
	Wire.beginTransmission(SSD1306);
	return true;
}
 2ec:	08 95       	ret

000002ee <USI_TWI_Master_Transfer>:
USI_TWI_Master_Transfer():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:226
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer(unsigned char temp)
{
  USISR = temp;                                          // Set USISR according to temp.
 2ee:	8e b9       	out	0x0e, r24	; 14
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:234
         (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
         (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software clock strobe as source.
         (1 << USITC);                                   // Toggle Clock Port.
  do {
    DELAY_T2TWI;
    USICR = temp; // Generate positive SCL edge.
 2f0:	8b e2       	ldi	r24, 0x2B	; 43
_delay_us():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/delay.h:276
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f2:	9e e0       	ldi	r25, 0x0E	; 14
 2f4:	9a 95       	dec	r25
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <USI_TWI_Master_Transfer+0x6>
USI_TWI_Master_Transfer():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:234
 2f8:	8d b9       	out	0x0d, r24	; 13
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:235
    while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
 2fa:	b2 9b       	sbis	0x16, 2	; 22
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <USI_TWI_Master_Transfer+0xc>
_delay_us():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/delay.h:276
 2fe:	96 e0       	ldi	r25, 0x06	; 6
 300:	9a 95       	dec	r25
 302:	f1 f7       	brne	.-4      	; 0x300 <USI_TWI_Master_Transfer+0x12>
 304:	00 c0       	rjmp	.+0      	; 0x306 <USI_TWI_Master_Transfer+0x18>
USI_TWI_Master_Transfer():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:238
      ; // Wait for SCL to go high.
    DELAY_T4TWI;
    USICR = temp;                   // Generate negative SCL edge.
 306:	8d b9       	out	0x0d, r24	; 13
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:239
  } while (!(USISR & (1 << USIOIF))); // Check for transfer complete.
 308:	76 9b       	sbis	0x0e, 6	; 14
 30a:	f3 cf       	rjmp	.-26     	; 0x2f2 <USI_TWI_Master_Transfer+0x4>
_delay_us():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/delay.h:276
 30c:	8e e0       	ldi	r24, 0x0E	; 14
 30e:	8a 95       	dec	r24
 310:	f1 f7       	brne	.-4      	; 0x30e <USI_TWI_Master_Transfer+0x20>
USI_TWI_Master_Transfer():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:242

  DELAY_T2TWI;
  temp  = USIDR;                 // Read out data.
 312:	8f b1       	in	r24, 0x0f	; 15
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:243
  USIDR = 0xFF;                  // Release SDA.
 314:	9f ef       	ldi	r25, 0xFF	; 255
 316:	9f b9       	out	0x0f, r25	; 15
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:244
  DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
 318:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:247

  return temp; // Return the data from the USIDR
}
 31a:	08 95       	ret

0000031c <wire_endTransmission()>:
wire_endTransmission():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_Wire.h:43

static bool wire_write(uint8_t byte) {
	return Wire.write(byte);
}

static uint8_t wire_endTransmission(void) {
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
endTransmission():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:467
  beginTransmission((uint8_t)address);
}

uint8_t TwoWire::endTransmission(uint8_t sendStop) {
  // transmit buffer (blocking)
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer,
 324:	c0 91 8b 00 	lds	r28, 0x008B	; 0x80008b <TwoWire::BufferLength>
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:115
  unsigned char tempUSISR_1bit = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC)
                                 |                 // Prepare register value to: Clear flags, and
                                 (0xE << USICNT0); // set USI to shift 1 bit i.e. count 2 clock edges.

  USI_TWI_state.errorState  = 0;
  USI_TWI_state.addressMode = TRUE;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <USI_TWI_state>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:145
    USI_TWI_state.errorState = USI_TWI_UE_DATA_COL;
    return (FALSE);
  }
#endif

  if (!(*msg
 32e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 332:	80 fd       	sbrc	r24, 0
 334:	03 c0       	rjmp	.+6      	; 0x33c <wire_endTransmission()+0x20>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:148
        & (1 << TWI_READ_BIT))) // The LSB in the address byte determines if is a masterRead or masterWrite operation.
  {
    USI_TWI_state.masterWriteDataMode = TRUE;
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <USI_TWI_state>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:152
  }

  /* Release SCL to ensure that (repeated) Start can be performed */
  PORT_USI_CL |= (1 << PIN_USI_SCL); // Release SCL.
 33c:	c2 9a       	sbi	0x18, 2	; 24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:153
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
 33e:	b2 9b       	sbis	0x16, 2	; 22
 340:	fe cf       	rjmp	.-4      	; 0x33e <wire_endTransmission()+0x22>
_delay_us():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/delay.h:276
 342:	86 e0       	ldi	r24, 0x06	; 6
 344:	8a 95       	dec	r24
 346:	f1 f7       	brne	.-4      	; 0x344 <wire_endTransmission()+0x28>
 348:	00 c0       	rjmp	.+0      	; 0x34a <wire_endTransmission()+0x2e>
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:162
#else
  DELAY_T2TWI; // Delay for T2TWI if TWI_STANDARD_MODE
#endif

  /* Generate Start Condition */
  PORT_USI &= ~(1 << PIN_USI_SDA); // Force SDA LOW.
 34a:	c0 98       	cbi	0x18, 0	; 24
_delay_us():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/delay.h:276
 34c:	e6 e0       	ldi	r30, 0x06	; 6
 34e:	ea 95       	dec	r30
 350:	f1 f7       	brne	.-4      	; 0x34e <wire_endTransmission()+0x32>
 352:	00 c0       	rjmp	.+0      	; 0x354 <wire_endTransmission()+0x38>
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:164
  DELAY_T4TWI;
  PORT_USI_CL &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
 354:	c2 98       	cbi	0x18, 2	; 24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:165
  PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
 356:	c0 9a       	sbi	0x18, 0	; 24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:168

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USISIF))) {
 358:	77 99       	sbic	0x0e, 7	; 14
 35a:	1c c0       	rjmp	.+56     	; 0x394 <wire_endTransmission()+0x78>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:169
    USI_TWI_state.errorState = USI_TWI_MISSING_START_CON;
 35c:	87 e0       	ldi	r24, 0x07	; 7
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:187

      /* Clock and verify (N)ACK from slave */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
      if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
        if (USI_TWI_state.addressMode)
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
 35e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <USI_TWI_state>
wire_endTransmission():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:190
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
        return (FALSE);
 362:	80 e0       	ldi	r24, 0x00	; 0
endTransmission():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:471
                                                         BufferLength,
                                                         sendStop);
  // reset tx buffer iterator vars
  BufferIndex = 0;
 364:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <TwoWire::BufferIndex>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:472
  BufferLength = 0;
 368:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <TwoWire::BufferLength>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:474
  // indicate that we are done transmitting
  transmitting = 0;
 36c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <TwoWire::transmitting>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:476
  // check for error
  if (ret == FALSE) {
 370:	81 11       	cpse	r24, r1
 372:	5c c0       	rjmp	.+184    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:477
    switch (USI_TWI_Get_State_Info()) {
 374:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <USI_TWI_state>
 378:	85 30       	cpi	r24, 0x05	; 5
 37a:	09 f4       	brne	.+2      	; 0x37e <wire_endTransmission()+0x62>
 37c:	53 c0       	rjmp	.+166    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 37e:	86 30       	cpi	r24, 0x06	; 6
 380:	09 f4       	brne	.+2      	; 0x384 <wire_endTransmission()+0x68>
 382:	56 c0       	rjmp	.+172    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	09 f0       	breq	.+2      	; 0x38a <wire_endTransmission()+0x6e>
 388:	4f c0       	rjmp	.+158    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
wire_endTransmission():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_Wire.h:45
	return Wire.endTransmission();
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	08 95       	ret
 394:	08 e6       	ldi	r16, 0x68	; 104
 396:	10 e0       	ldi	r17, 0x00	; 0
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:203
      *(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
 398:	df ef       	ldi	r29, 0xFF	; 255
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:177
#endif

  /*Write address and Read/Write data */
  do {
    /* If masterWrite cycle (or initial address transmission)*/
    if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode) {
 39a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <USI_TWI_state>
 39e:	83 70       	andi	r24, 0x03	; 3
 3a0:	a1 f1       	breq	.+104    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:179
      /* Write a byte */
      PORT_USI_CL &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
 3a2:	c2 98       	cbi	0x18, 2	; 24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:180
      USIDR = *(msg++);                        // Setup data.
 3a4:	f8 01       	movw	r30, r16
 3a6:	80 81       	ld	r24, Z
 3a8:	8f b9       	out	0x0f, r24	; 15
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:181
      USI_TWI_Master_Transfer(tempUSISR_8bit); // Send 8 bits on bus.
 3aa:	80 ef       	ldi	r24, 0xF0	; 240
 3ac:	a0 df       	rcall	.-192    	; 0x2ee <USI_TWI_Master_Transfer>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:184

      /* Clock and verify (N)ACK from slave */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
 3ae:	b8 98       	cbi	0x17, 0	; 23
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:185
      if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
 3b0:	8e ef       	ldi	r24, 0xFE	; 254
 3b2:	9d df       	rcall	.-198    	; 0x2ee <USI_TWI_Master_Transfer>
 3b4:	80 ff       	sbrs	r24, 0
 3b6:	0c c0       	rjmp	.+24     	; 0x3d0 <wire_endTransmission()+0xb4>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:186
        if (USI_TWI_state.addressMode)
 3b8:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <USI_TWI_state>
 3bc:	89 2f       	mov	r24, r25
 3be:	81 70       	andi	r24, 0x01	; 1
 3c0:	90 ff       	sbrs	r25, 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <wire_endTransmission()+0xac>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:187
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
 3c4:	86 e0       	ldi	r24, 0x06	; 6
 3c6:	cb cf       	rjmp	.-106    	; 0x35e <wire_endTransmission()+0x42>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:189
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
 3c8:	95 e0       	ldi	r25, 0x05	; 5
 3ca:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <USI_TWI_state>
 3ce:	ca cf       	rjmp	.-108    	; 0x364 <wire_endTransmission()+0x48>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:192
        return (FALSE);
      }
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
 3d0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <USI_TWI_state>
 3d4:	8e 7f       	andi	r24, 0xFE	; 254
 3d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <USI_TWI_state>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:209
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
    }
  } while (--msgSize); // Until all data sent/received.
 3da:	c1 50       	subi	r28, 0x01	; 1
 3dc:	0f 5f       	subi	r16, 0xFF	; 255
 3de:	1f 4f       	sbci	r17, 0xFF	; 255
 3e0:	c1 11       	cpse	r28, r1
 3e2:	db cf       	rjmp	.-74     	; 0x39a <wire_endTransmission()+0x7e>
USI_TWI_Master_Stop():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:255
 Function for generating a TWI Stop Condition. Used to release
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop(void)
{
  PORT_USI &= ~(1 << PIN_USI_SDA); // Pull SDA low.
 3e4:	c0 98       	cbi	0x18, 0	; 24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:256
  PORT_USI_CL |= (1 << PIN_USI_SCL);  // Release SCL.
 3e6:	c2 9a       	sbi	0x18, 2	; 24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:257
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
 3e8:	b2 9b       	sbis	0x16, 2	; 22
 3ea:	fe cf       	rjmp	.-4      	; 0x3e8 <wire_endTransmission()+0xcc>
_delay_us():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/delay.h:276
 3ec:	f6 e0       	ldi	r31, 0x06	; 6
 3ee:	fa 95       	dec	r31
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <wire_endTransmission()+0xd2>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <wire_endTransmission()+0xd8>
USI_TWI_Master_Stop():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:260
    ; // Wait for SCL to go high.
  DELAY_T4TWI;
  PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
 3f4:	c0 9a       	sbi	0x18, 0	; 24
_delay_us():
c:\users\pavel\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\avr\include\util/delay.h:276
 3f6:	8e e0       	ldi	r24, 0x0E	; 14
 3f8:	8a 95       	dec	r24
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <wire_endTransmission()+0xdc>
USI_TWI_Master_Stop():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:264
  DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USIPF))) {
 3fc:	75 99       	sbic	0x0e, 5	; 14
 3fe:	03 c0       	rjmp	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:265
    USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
 400:	88 e0       	ldi	r24, 0x08	; 8
 402:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <USI_TWI_state>
wire_endTransmission():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:216
  if (stop) {
    USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
  }

  /* Transmission successfully completed*/
  return (TRUE);
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	ad cf       	rjmp	.-166    	; 0x364 <wire_endTransmission()+0x48>
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:197
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
    }
    /* Else masterRead cycle*/
    else {
      /* Read a data byte */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
 40a:	b8 98       	cbi	0x17, 0	; 23
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:198
      *(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);
 40c:	80 ef       	ldi	r24, 0xF0	; 240
 40e:	6f df       	rcall	.-290    	; 0x2ee <USI_TWI_Master_Transfer>
 410:	f8 01       	movw	r30, r16
 412:	80 83       	st	Z, r24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:201

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
 414:	c1 30       	cpi	r28, 0x01	; 1
 416:	21 f4       	brne	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:203
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
 418:	df b9       	out	0x0f, r29	; 15
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:207
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
 41a:	8e ef       	ldi	r24, 0xFE	; 254
 41c:	68 df       	rcall	.-304    	; 0x2ee <USI_TWI_Master_Transfer>
 41e:	dd cf       	rjmp	.-70     	; 0x3da <wire_endTransmission()+0xbe>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:205
      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
 420:	1f b8       	out	0x0f, r1	; 15
 422:	fb cf       	rjmp	.-10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
wire_endTransmission():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:483
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
    case USI_TWI_NO_ACK_ON_ADDRESS:
      return 2; //received NACK on transmit of address
    case USI_TWI_NO_ACK_ON_DATA:
      return 3; //received NACK on transmit of data
 424:	83 e0       	ldi	r24, 0x03	; 3
 426:	b1 cf       	rjmp	.-158    	; 0x38a <wire_endTransmission()+0x6e>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:485
    }
    return 4; //other error
 428:	84 e0       	ldi	r24, 0x04	; 4
 42a:	af cf       	rjmp	.-162    	; 0x38a <wire_endTransmission()+0x6e>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:487
  }
  return 0; //success
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	ad cf       	rjmp	.-166    	; 0x38a <wire_endTransmission()+0x6e>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:481
  if (ret == FALSE) {
    switch (USI_TWI_Get_State_Info()) {
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
    case USI_TWI_NO_ACK_ON_ADDRESS:
      return 2; //received NACK on transmit of address
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	ab cf       	rjmp	.-170    	; 0x38a <wire_endTransmission()+0x6e>

00000434 <wire_begin()>:
begin():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:362
}

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void) {
  BufferIndex = 0;
 434:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <TwoWire::BufferIndex>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:363
  BufferLength = 0;
 438:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <TwoWire::BufferLength>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src/Wire.cpp:365

  transmitting = 0;
 43c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <TwoWire::transmitting>
USI_TWI_Master_Initialise():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:56
/*---------------------------------------------------------------
 USI TWI single master initialization function
---------------------------------------------------------------*/
void USI_TWI_Master_Initialise(void)
{
  PORT_USI |= (1 << PIN_USI_SDA); // Enable pullup on SDA, to set high as released state.
 440:	c0 9a       	sbi	0x18, 0	; 24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:57
  PORT_USI_CL |= (1 << PIN_USI_SCL); // Enable pullup on SCL, to set high as released state.
 442:	c2 9a       	sbi	0x18, 2	; 24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:59

  DDR_USI_CL |= (1 << PIN_USI_SCL); // Enable SCL as output.
 444:	ba 9a       	sbi	0x17, 2	; 23
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:60
  DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
 446:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:62

  USIDR = 0xFF;                                           // Preload dataregister with "released level" data.
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	8f b9       	out	0x0f, r24	; 15
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:63
  USICR = (0 << USISIE) | (0 << USIOIE) |                 // Disable Interrupts.
 44c:	8a e2       	ldi	r24, 0x2A	; 42
 44e:	8d b9       	out	0x0d, r24	; 13
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:67
          (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
          (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software stobe as counter clock source
          (0 << USITC);
  USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags,
 450:	80 ef       	ldi	r24, 0xF0	; 240
 452:	8e b9       	out	0x0e, r24	; 14
check():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_Wire.h:20
static uint8_t wire_endTransmission(void);

#ifndef TINY4KOLED_QUICK_BEGIN
inline static bool check (void) {
	const uint8_t noError = 0x00;
	wire_beginTransmission();
 454:	41 df       	rcall	.-382    	; 0x2d8 <wire_beginTransmission()>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_Wire.h:21
	return (wire_endTransmission()==noError);
 456:	62 df       	rcall	.-316    	; 0x31c <wire_endTransmission()>
wire_begin():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_Wire.h:28
#endif

static void wire_begin(void) {
	Wire.begin();
#ifndef TINY4KOLED_QUICK_BEGIN
	while (!check()) {
 458:	88 23       	and	r24, r24
 45a:	31 f0       	breq	.+12     	; 0x468 <wire_begin()+0x34>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_Wire.h:29
		delay(10);
 45c:	6a e0       	ldi	r22, 0x0A	; 10
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	51 de       	rcall	.-862    	; 0x108 <delay>
 466:	f6 cf       	rjmp	.-20     	; 0x454 <wire_begin()+0x20>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED_Wire.h:32
	}
#endif
}
 468:	08 95       	ret

0000046a <__vector_5>:
__vector_5():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:133
#else

#error Millis() timer not defined!

#endif
{
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:136
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
 480:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <millis_timer_millis>
 484:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <millis_timer_millis+0x1>
 488:	a0 91 9e 00 	lds	r26, 0x009E	; 0x80009e <millis_timer_millis+0x2>
 48c:	b0 91 9f 00 	lds	r27, 0x009F	; 0x80009f <millis_timer_millis+0x3>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:137
  unsigned char f = millis_timer_fract;
 490:	30 91 9b 00 	lds	r19, 0x009B	; 0x80009b <millis_timer_fract>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:149
    f -= FRACT_MAX;
    m += 1;
  }
...rmv */

  f += FRACT_INC;
 494:	26 e0       	ldi	r18, 0x06	; 6
 496:	23 0f       	add	r18, r19
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:151

  if (f >= FRACT_MAX)
 498:	2d 37       	cpi	r18, 0x7D	; 125
 49a:	68 f1       	brcs	.+90     	; 0x4f6 <__vector_5+0x8c>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:153
  {
    f -= FRACT_MAX;
 49c:	29 e8       	ldi	r18, 0x89	; 137
 49e:	23 0f       	add	r18, r19
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:155
  m += 1;
    m += MILLIS_INC;
 4a0:	03 96       	adiw	r24, 0x03	; 3
 4a2:	a1 1d       	adc	r26, r1
 4a4:	b1 1d       	adc	r27, r1
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:162
  else
  {
    m += MILLIS_INC;
  }

  millis_timer_fract = f;
 4a6:	20 93 9b 00 	sts	0x009B, r18	; 0x80009b <millis_timer_fract>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:163
  millis_timer_millis = m;
 4aa:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <millis_timer_millis>
 4ae:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <millis_timer_millis+0x1>
 4b2:	a0 93 9e 00 	sts	0x009E, r26	; 0x80009e <millis_timer_millis+0x2>
 4b6:	b0 93 9f 00 	sts	0x009F, r27	; 0x80009f <millis_timer_millis+0x3>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:164
  millis_timer_overflow_count++;
 4ba:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <millis_timer_overflow_count>
 4be:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <millis_timer_overflow_count+0x1>
 4c2:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <millis_timer_overflow_count+0x2>
 4c6:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <millis_timer_overflow_count+0x3>
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	a1 1d       	adc	r26, r1
 4ce:	b1 1d       	adc	r27, r1
 4d0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <millis_timer_overflow_count>
 4d4:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <millis_timer_overflow_count+0x1>
 4d8:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <millis_timer_overflow_count+0x2>
 4dc:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <millis_timer_overflow_count+0x3>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:171

//MICROSECONDS_PER_MILLIS_OVERFLOW=2048
//MILLIS_INC=2
//FRACT_INC=6
//FRACT_MAX=125
}
 4e0:	bf 91       	pop	r27
 4e2:	af 91       	pop	r26
 4e4:	9f 91       	pop	r25
 4e6:	8f 91       	pop	r24
 4e8:	3f 91       	pop	r19
 4ea:	2f 91       	pop	r18
 4ec:	0f 90       	pop	r0
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	0f 90       	pop	r0
 4f2:	1f 90       	pop	r1
 4f4:	18 95       	reti
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:159
  m += 1;
    m += MILLIS_INC;
  }
  else
  {
    m += MILLIS_INC;
 4f6:	02 96       	adiw	r24, 0x02	; 2
 4f8:	a1 1d       	adc	r26, r1
 4fa:	b1 1d       	adc	r27, r1
 4fc:	d4 cf       	rjmp	.-88     	; 0x4a6 <__vector_5+0x3c>

000004fe <__vector_14>:
__vector_14():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:212
ISR(USI_OVERFLOW_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_OVERFLOW_VECTOR
__interrupt void USI_Counter_Overflow_ISR(void)
#endif
{
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	2f 93       	push	r18
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	ef 93       	push	r30
 510:	ff 93       	push	r31
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:217
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
 512:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <USI_TWI_Overflow_State>
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	09 f4       	brne	.+2      	; 0x51c <__vector_14+0x1e>
 51a:	5e c0       	rjmp	.+188    	; 0x5d8 <__vector_14+0xda>
 51c:	78 f4       	brcc	.+30     	; 0x53c <__vector_14+0x3e>
 51e:	88 23       	and	r24, r24
 520:	49 f1       	breq	.+82     	; 0x574 <__vector_14+0x76>
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	09 f4       	brne	.+2      	; 0x528 <__vector_14+0x2a>
 526:	3e c0       	rjmp	.+124    	; 0x5a4 <__vector_14+0xa6>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:310
    {
      SET_USI_TO_SEND_NACK();
    }
    break;
  }
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	2f 91       	pop	r18
 532:	0f 90       	pop	r0
 534:	0f be       	out	0x3f, r0	; 63
 536:	0f 90       	pop	r0
 538:	1f 90       	pop	r1
 53a:	18 95       	reti
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:217
{
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
 53c:	84 30       	cpi	r24, 0x04	; 4
 53e:	09 f4       	brne	.+2      	; 0x542 <__vector_14+0x44>
 540:	51 c0       	rjmp	.+162    	; 0x5e4 <__vector_14+0xe6>
 542:	48 f1       	brcs	.+82     	; 0x596 <__vector_14+0x98>
 544:	85 30       	cpi	r24, 0x05	; 5
 546:	81 f7       	brne	.-32     	; 0x528 <__vector_14+0x2a>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:297
    break;

  // Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
  case USI_SLAVE_GET_DATA_AND_SEND_ACK:
    // Put data into Buffer
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
 548:	84 e0       	ldi	r24, 0x04	; 4
 54a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <USI_TWI_Overflow_State>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:298
    tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
 54e:	9f b1       	in	r25, 0x0f	; 15
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:299
    tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
 550:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <TWI_RxHead>
 554:	8f 5f       	subi	r24, 0xFF	; 255
 556:	8f 70       	andi	r24, 0x0F	; 15
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:300
    if (TWI_RxTail != tmpRxHead) {
 558:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <TWI_RxTail>
 55c:	28 17       	cp	r18, r24
 55e:	09 f4       	brne	.+2      	; 0x562 <__vector_14+0x64>
 560:	46 c0       	rjmp	.+140    	; 0x5ee <__vector_14+0xf0>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:301
      TWI_RxHead            = tmpRxHead;
 562:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <TWI_RxHead>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
 566:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <TWI_RxHead>
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	e8 59       	subi	r30, 0x98	; 152
 56e:	ff 4f       	sbci	r31, 0xFF	; 255
 570:	90 83       	st	Z, r25
 572:	0b c0       	rjmp	.+22     	; 0x58a <__vector_14+0x8c>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:221

  switch (USI_TWI_Overflow_State) {
  // ---------- Address mode ----------
  // Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
  case USI_SLAVE_CHECK_ADDRESS:
    if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
 574:	8f b1       	in	r24, 0x0f	; 15
 576:	88 23       	and	r24, r24
 578:	19 f0       	breq	.+6      	; 0x580 <__vector_14+0x82>
 57a:	8f b1       	in	r24, 0x0f	; 15
 57c:	86 95       	lsr	r24
 57e:	71 f4       	brne	.+28     	; 0x59c <__vector_14+0x9e>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:222
      if (USIDR & 0x01) {
 580:	78 9b       	sbis	0x0f, 0	; 15
 582:	07 c0       	rjmp	.+14     	; 0x592 <__vector_14+0x94>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:229
          // reset tx buffer and call callback
          tmpTxTail = TWI_TxHead;
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
 584:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:231
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
 586:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <USI_TWI_Overflow_State>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:233
      }
      SET_USI_TO_SEND_ACK();
 58a:	1f b8       	out	0x0f, r1	; 15
 58c:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
 58e:	8e e7       	ldi	r24, 0x7E	; 126
 590:	21 c0       	rjmp	.+66     	; 0x5d4 <__vector_14+0xd6>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:231
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
 592:	84 e0       	ldi	r24, 0x04	; 4
 594:	f8 cf       	rjmp	.-16     	; 0x586 <__vector_14+0x88>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:242
    break;

  // ----- Master write data mode ------
  // Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
  case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
    if (USIDR) // If NACK, the master does not want more data.
 596:	8f b1       	in	r24, 0x0f	; 15
 598:	88 23       	and	r24, r24
 59a:	21 f0       	breq	.+8      	; 0x5a4 <__vector_14+0xa6>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:259
    if (TWI_TxHead != tmpTxTail) {
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
      USIDR      = TWI_TxBuf[TWI_TxTail];
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
 59c:	b8 98       	cbi	0x17, 0	; 23
 59e:	88 ea       	ldi	r24, 0xA8	; 168
 5a0:	8d b9       	out	0x0d, r24	; 13
 5a2:	17 c0       	rjmp	.+46     	; 0x5d2 <__vector_14+0xd4>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:253

  // Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
  case USI_SLAVE_SEND_DATA:

    // Get data from Buffer
    tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
 5a4:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <TWI_TxTail>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:254
    if (TWI_TxHead != tmpTxTail) {
 5a8:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <TWI_TxHead>
 5ac:	98 17       	cp	r25, r24
 5ae:	b1 f3       	breq	.-20     	; 0x59c <__vector_14+0x9e>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:255
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
 5b0:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <TWI_TxTail>
 5b4:	8f 5f       	subi	r24, 0xFF	; 255
 5b6:	8f 70       	andi	r24, 0x0F	; 15
 5b8:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <TWI_TxTail>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:256
      USIDR      = TWI_TxBuf[TWI_TxTail];
 5bc:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <TWI_TxTail>
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	e8 58       	subi	r30, 0x88	; 136
 5c4:	ff 4f       	sbci	r31, 0xFF	; 255
 5c6:	80 81       	ld	r24, Z
 5c8:	8f b9       	out	0x0f, r24	; 15
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:262
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
      return;
    }
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <USI_TWI_Overflow_State>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:263
    SET_USI_TO_SEND_DATA();
 5d0:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:276

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
    SET_USI_TO_READ_DATA();
 5d2:	80 e7       	ldi	r24, 0x70	; 112
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
 5d4:	8e b9       	out	0x0e, r24	; 14
 5d6:	a8 cf       	rjmp	.-176    	; 0x528 <__vector_14+0x2a>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:268
    SET_USI_TO_SEND_DATA();
    break;

  // Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
  case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <USI_TWI_Overflow_State>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:269
    SET_USI_TO_READ_ACK();
 5de:	b8 98       	cbi	0x17, 0	; 23
 5e0:	1f b8       	out	0x0f, r1	; 15
 5e2:	d5 cf       	rjmp	.-86     	; 0x58e <__vector_14+0x90>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:275
    break;

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 5e4:	85 e0       	ldi	r24, 0x05	; 5
 5e6:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <USI_TWI_Overflow_State>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:276
    SET_USI_TO_READ_DATA();
 5ea:	b8 98       	cbi	0x17, 0	; 23
 5ec:	f2 cf       	rjmp	.-28     	; 0x5d2 <__vector_14+0xd4>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
 5ee:	b8 98       	cbi	0x17, 0	; 23
 5f0:	ce cf       	rjmp	.-100    	; 0x58e <__vector_14+0x90>

000005f2 <__vector_13>:
__vector_13():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:165
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
 5f2:	1f 92       	push	r1
 5f4:	0f 92       	push	r0
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	0f 92       	push	r0
 5fa:	11 24       	eor	r1, r1
 5fc:	8f 93       	push	r24
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:178
      // reset rx buffer
      TWI_RxTail = tmpRxHead;
    }
  }

  USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
 5fe:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <USI_TWI_Overflow_State>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:179
  DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
 602:	b8 98       	cbi	0x17, 0	; 23
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:180
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
 604:	b2 9b       	sbis	0x16, 2	; 22
 606:	04 c0       	rjmp	.+8      	; 0x610 <__vector_13+0x1e>
 608:	b0 9b       	sbis	0x16, 0	; 22
 60a:	fc cf       	rjmp	.-8      	; 0x604 <__vector_13+0x12>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:185
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
 60c:	88 ea       	ldi	r24, 0xA8	; 168
 60e:	01 c0       	rjmp	.+2      	; 0x612 <__vector_13+0x20>
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:192
                                            // to first Start Condition (potential failure)
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  } else {
    // really Start Condition (Enable Overflow Interrupt)
    USICR = (1 << USISIE) | (1 << USIOIE)
 610:	88 ef       	ldi	r24, 0xF8	; 248
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:185
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
 612:	8d b9       	out	0x0d, r24	; 13
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:198
            | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
            (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  }
  USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
 614:	80 ef       	ldi	r24, 0xF0	; 240
 616:	8e b9       	out	0x0e, r24	; 14
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:200
          (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
 618:	8f 91       	pop	r24
 61a:	0f 90       	pop	r0
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	0f 90       	pop	r0
 620:	1f 90       	pop	r1
 622:	18 95       	reti

00000624 <__vector_9>:
__vector_9():
  bitClear(PORTB, 3);
  //tmrval1 = TCNT1;
}

//ISR(TIMER1_OVF_vect){
ISR(TIMER1_COMPB_vect){
 624:	1f 92       	push	r1
 626:	0f 92       	push	r0
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	0f 92       	push	r0
 62c:	11 24       	eor	r1, r1
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:202
  //clear pin
  bitSet(PORTB, 3);
 62e:	c3 9a       	sbi	0x18, 3	; 24
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:204
  //tmrval = TCNT1;
}
 630:	0f 90       	pop	r0
 632:	0f be       	out	0x3f, r0	; 63
 634:	0f 90       	pop	r0
 636:	1f 90       	pop	r1
 638:	18 95       	reti

0000063a <__vector_3>:
__vector_3():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:193
  WDTCR = (1<<WDE) | (1<<WDP1) | (1<<WDP2); // 1s
  sei();
}


ISR(TIMER1_COMPA_vect){
 63a:	1f 92       	push	r1
 63c:	0f 92       	push	r0
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	0f 92       	push	r0
 642:	11 24       	eor	r1, r1
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:195
  // set pin
  bitClear(PORTB, 3);
 644:	c3 98       	cbi	0x18, 3	; 24
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:197
  //tmrval1 = TCNT1;
}
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <main>:
main():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/main.cpp:6
#include <Arduino.h>

int main(void)
{
  #ifdef TUNED_OSCCAL_VALUE
  OSCCAL = TUNED_OSCCAL_VALUE; //set the oscillator calibration value based on the pins_arduino.h file. If this is not set, it will be optimised away
 650:	81 b7       	in	r24, 0x31	; 49
 652:	81 bf       	out	0x31, r24	; 49
init():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:699
    } else {
      OSCCAL += 5;
    }
  }
  #endif
  sei();
 654:	78 94       	sei
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:831
  #endif
  #endif

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0) && defined(WGM01)
  sbi(TCCR0A, WGM01);
 656:	8a b5       	in	r24, 0x2a	; 42
 658:	82 60       	ori	r24, 0x02	; 2
 65a:	8a bd       	out	0x2a, r24	; 42
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:832
  sbi(TCCR0A, WGM00);
 65c:	8a b5       	in	r24, 0x2a	; 42
 65e:	81 60       	ori	r24, 0x01	; 1
 660:	8a bd       	out	0x2a, r24	; 42
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:855
  #endif

  // Millis timer is always processor clock divided by MillisTimer_Prescale_Value (64)
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
   #ifdef TCCR0B
    TCCR0B = (TCCR0B & ~((1<<CS02)|(1<<CS01)|(1<<CS00))) | (MillisTimer_Prescale_Index << CS00);
 662:	83 b7       	in	r24, 0x33	; 51
 664:	88 7f       	andi	r24, 0xF8	; 248
 666:	83 60       	ori	r24, 0x03	; 3
 668:	83 bf       	out	0x33, r24	; 51
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:867
  TCCR1B = (TCCR1B & ~((1<<CS13)|(1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #elif (TIMER_TO_USE_FOR_MILLIS == 1)
  TCCR1B = (TCCR1B & ~((1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #endif
  // this needs to be called before setup() or some functions won't work there
  sei();
 66a:	78 94       	sei
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:872

  #ifndef DISABLEMILLIS
  // Enable the overlow interrupt (this is the basic system tic-toc for millis)
  #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  sbi(TIMSK, TOIE0);
 66c:	89 b7       	in	r24, 0x39	; 57
 66e:	82 60       	ori	r24, 0x02	; 2
 670:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:507
  TCCR0B |= (ToneTimer_Prescale_Index << CS00);
  #elif defined(__AVR_ATtiny43__)
  TCCR1A = 3; //WGM 10=1, WGM11=1
  TCCR1B = 3; //prescaler of 64
  #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1)
  TCCR1 &= ~((1<<CS13) | (1<<CS12) | (1<<CS11) | (1<<CS10)); //stop the clock to configure
 672:	80 b7       	in	r24, 0x30	; 48
 674:	80 7f       	andi	r24, 0xF0	; 240
 676:	80 bf       	out	0x30, r24	; 48
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:509
  // Use the Tone Timer for fast PWM as phase correct not supported by this timer
  sbi(TCCR1, CTC1);
 678:	80 b7       	in	r24, 0x30	; 48
 67a:	80 68       	ori	r24, 0x80	; 128
 67c:	80 bf       	out	0x30, r24	; 48
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:511
  //#if !defined(__AVR_ATtiny85__)
  sbi(TCCR1, PWM1A); //for the tiny 85, Timer0 is used instead.
 67e:	80 b7       	in	r24, 0x30	; 48
 680:	80 64       	ori	r24, 0x40	; 64
 682:	80 bf       	out	0x30, r24	; 48
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:513
  //#endif
  sbi(GTCCR, PWM1B);
 684:	8c b5       	in	r24, 0x2c	; 44
 686:	80 64       	ori	r24, 0x40	; 64
 688:	8c bd       	out	0x2c, r24	; 44
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:514
  OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
 68a:	8f ef       	ldi	r24, 0xFF	; 255
 68c:	8d bd       	out	0x2d, r24	; 45
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:515
  TCCR1 |= (ToneTimer_Prescale_Index << CS10);
 68e:	80 b7       	in	r24, 0x30	; 48
 690:	87 60       	ori	r24, 0x07	; 7
 692:	80 bf       	out	0x30, r24	; 48
init():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:893

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
  #if defined(ADCSRA)
    // set a2d prescale factor
  ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
 694:	86 b1       	in	r24, 0x06	; 6
 696:	88 77       	andi	r24, 0x78	; 120
 698:	86 68       	ori	r24, 0x86	; 134
 69a:	86 b9       	out	0x06, r24	; 6
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:895
    // enable a2d conversions
    sbi(ADCSRA, ADEN);
 69c:	37 9a       	sbi	0x06, 7	; 6
setup():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:135
  wdt_disable();
}

void setup() {
  //stop motor
  bitClear(PORTB, 3);
 69e:	c3 98       	cbi	0x18, 3	; 24
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:136
  bitSet(DDRB, 3);
 6a0:	bb 9a       	sbi	0x17, 3	; 23
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:138

  bitClear(DDRB, 1); // Input
 6a2:	b9 98       	cbi	0x17, 1	; 23
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:139
  bitSet(PORTB, 1); // Enable pullup
 6a4:	c1 9a       	sbi	0x18, 1	; 24
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:141

  disableWatchdog();
 6a6:	be dd       	rcall	.-1156   	; 0x224 <disableWatchdog()>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:144
  
  // configure ADC
  ADMUX =
 6a8:	82 e0       	ldi	r24, 0x02	; 2
 6aa:	87 b9       	out	0x07, r24	; 7
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:153
           (0 << REFS0) |     // Sets ref. voltage to VCC
           (0 << MUX3)  |     // use ADC2 for input (PB4)
           (0 << MUX2)  |     // use ADC2 for input (PB4)
           (1 << MUX1)  |     // use ADC2 for input (PB4)
           (0 << MUX0);       // use ADC2 for input (PB4)
 ADCSRA = 
 6ac:	87 e8       	ldi	r24, 0x87	; 135
 6ae:	86 b9       	out	0x06, r24	; 6
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:160
           (1 << ADPS2) |     // set prescaler to 64, bit 2 
           (1 << ADPS1) |     // set prescaler to 64, bit 1 
           (1 << ADPS0);      // set prescaler to 64, bit 0 


  ADCSRA |= (1 << ADSC); // start first conversion
 6b0:	36 9a       	sbi	0x06, 6	; 6
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:180
    delay(500);
  }
#endif

  //wait until button is released
  while(getButtonState()==0){
 6b2:	c1 dd       	rcall	.-1150   	; 0x236 <getButtonState()>
 6b4:	81 11       	cpse	r24, r1
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <main+0x74>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:182
    // button is pressed
    delay(100);
 6b8:	64 e6       	ldi	r22, 0x64	; 100
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	23 dd       	rcall	.-1466   	; 0x108 <delay>
 6c2:	f7 cf       	rjmp	.-18     	; 0x6b2 <main+0x62>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:186
  }  

  // enable 1s watchdog with reset
  cli();
 6c4:	f8 94       	cli
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:187
  WDTCR = (1<<WDCE) | (1<<WDE);
 6c6:	88 e1       	ldi	r24, 0x18	; 24
 6c8:	81 bd       	out	0x21, r24	; 33
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:188
  WDTCR = (1<<WDE) | (1<<WDP1) | (1<<WDP2); // 1s
 6ca:	8e e0       	ldi	r24, 0x0E	; 14
 6cc:	81 bd       	out	0x21, r24	; 33
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:189
  sei();
 6ce:	78 94       	sei
getbatIndicatorVal():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:118
  if(adc128>=V1S6) return 6;
  if(adc128>=V1S5) return 5;
  if(adc128>=V1S4) return 4;
  if(adc128>=V1S3) return 3;
  if(adc128>=V1S2) return 2;
  if(adc128>=V1S1) return 1;
 6d0:	bb 24       	eor	r11, r11
 6d2:	b3 94       	inc	r11
startMotor():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:222
}

// start motor smoothly
bool startMotor(void){
  cli();
  OCR1A = 75; // value to test
 6d4:	db e4       	ldi	r29, 0x4B	; 75
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:223
  OCR1B = 255; // value to test	
 6d6:	1f ef       	ldi	r17, 0xFF	; 255
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:224
  TCCR1 = (1<<CS13) | (1<<CS11) ; // Fast PWM mode (value 3)
 6d8:	0a e0       	ldi	r16, 0x0A	; 10
loop():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:270
	delay(5);
    bitClear(PORTB,3);  
}

void loop() {  
  wdt_reset();
 6da:	a8 95       	wdr
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:271
  uint16_t rawadc = readADC();
 6dc:	8d dd       	rcall	.-1254   	; 0x1f8 <readADC()>
getbatIndicatorVal():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:112
// 3.85v - 66%
// 4.0v - 83%
// 4.2v - 100%

uint8_t getbatIndicatorVal(uint16_t rawadc){
  uint32_t adc128 = (uint32_t)rawadc * 128;
 6de:	b0 e0       	ldi	r27, 0x00	; 0
 6e0:	a0 e0       	ldi	r26, 0x00	; 0
 6e2:	6c 01       	movw	r12, r24
 6e4:	7d 01       	movw	r14, r26
 6e6:	37 e0       	ldi	r19, 0x07	; 7
 6e8:	cc 0c       	add	r12, r12
 6ea:	dd 1c       	adc	r13, r13
 6ec:	ee 1c       	adc	r14, r14
 6ee:	ff 1c       	adc	r15, r15
 6f0:	3a 95       	dec	r19
 6f2:	d1 f7       	brne	.-12     	; 0x6e8 <main+0x98>
main():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:113
  if(adc128>=V1S6) return 6;
 6f4:	86 e0       	ldi	r24, 0x06	; 6
getbatIndicatorVal():
 6f6:	21 e4       	ldi	r18, 0x41	; 65
 6f8:	c2 16       	cp	r12, r18
 6fa:	21 e8       	ldi	r18, 0x81	; 129
 6fc:	d2 06       	cpc	r13, r18
 6fe:	21 e0       	ldi	r18, 0x01	; 1
 700:	e2 06       	cpc	r14, r18
 702:	f1 04       	cpc	r15, r1
 704:	68 f5       	brcc	.+90     	; 0x760 <main+0x110>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:114
  if(adc128>=V1S5) return 5;
 706:	84 e5       	ldi	r24, 0x54	; 84
 708:	c8 16       	cp	r12, r24
 70a:	83 e7       	ldi	r24, 0x73	; 115
 70c:	d8 06       	cpc	r13, r24
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	e8 06       	cpc	r14, r24
 712:	f1 04       	cpc	r15, r1
 714:	08 f0       	brcs	.+2      	; 0x718 <main+0xc8>
 716:	45 c0       	rjmp	.+138    	; 0x7a2 <main+0x152>
main():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:115
  if(adc128>=V1S4) return 4;
 718:	84 e0       	ldi	r24, 0x04	; 4
getbatIndicatorVal():
 71a:	97 e6       	ldi	r25, 0x67	; 103
 71c:	c9 16       	cp	r12, r25
 71e:	95 e6       	ldi	r25, 0x65	; 101
 720:	d9 06       	cpc	r13, r25
 722:	91 e0       	ldi	r25, 0x01	; 1
 724:	e9 06       	cpc	r14, r25
 726:	f1 04       	cpc	r15, r1
 728:	d8 f4       	brcc	.+54     	; 0x760 <main+0x110>
main():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:116
  if(adc128>=V1S3) return 3;
 72a:	83 e0       	ldi	r24, 0x03	; 3
getbatIndicatorVal():
 72c:	2a e7       	ldi	r18, 0x7A	; 122
 72e:	c2 16       	cp	r12, r18
 730:	27 e5       	ldi	r18, 0x57	; 87
 732:	d2 06       	cpc	r13, r18
 734:	21 e0       	ldi	r18, 0x01	; 1
 736:	e2 06       	cpc	r14, r18
 738:	f1 04       	cpc	r15, r1
 73a:	90 f4       	brcc	.+36     	; 0x760 <main+0x110>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:117
  if(adc128>=V1S2) return 2;
 73c:	83 e3       	ldi	r24, 0x33	; 51
 73e:	c8 16       	cp	r12, r24
 740:	8e e4       	ldi	r24, 0x4E	; 78
 742:	d8 06       	cpc	r13, r24
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	e8 06       	cpc	r14, r24
 748:	f1 04       	cpc	r15, r1
 74a:	68 f5       	brcc	.+90     	; 0x7a6 <main+0x156>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:118
  if(adc128>=V1S1) return 1;
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	97 ee       	ldi	r25, 0xE7	; 231
 750:	c9 16       	cp	r12, r25
 752:	94 e4       	ldi	r25, 0x44	; 68
 754:	d9 06       	cpc	r13, r25
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	e9 06       	cpc	r14, r25
 75a:	f1 04       	cpc	r15, r1
 75c:	08 f4       	brcc	.+2      	; 0x760 <main+0x110>
 75e:	80 e0       	ldi	r24, 0x00	; 0
loop():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:275
  wdt_reset();
  uint16_t rawadc = readADC();
  uint8_t batInd = getbatIndicatorVal(rawadc);
  bool batEmpty = isBatteryEmpty(rawadc);
  // redraw screen only when needed (to avoid unnecesarry i2c traffic)
  if(batInd!=prev_batInd || batEmpty){
 760:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <prev_batInd>
 764:	98 13       	cpse	r25, r24
 766:	08 c0       	rjmp	.+16     	; 0x778 <main+0x128>
 768:	2f e7       	ldi	r18, 0x7F	; 127
 76a:	c2 16       	cp	r12, r18
 76c:	26 e1       	ldi	r18, 0x16	; 22
 76e:	d2 06       	cpc	r13, r18
 770:	21 e0       	ldi	r18, 0x01	; 1
 772:	e2 06       	cpc	r14, r18
 774:	f1 04       	cpc	r15, r1
 776:	38 f4       	brcc	.+14     	; 0x786 <main+0x136>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:276
    prev_batInd = batInd;
 778:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <prev_batInd>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:287
    }else{
      oled.bitmap(128-32,0,32,4,stateOK);
    }
    oled.switchFrame();
#endif
    delay(50); // make sure, that page switch doesn't occur too often
 77c:	62 e3       	ldi	r22, 0x32	; 50
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	c1 dc       	rcall	.-1662   	; 0x108 <delay>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:290
  }
  // check button and start/stop motor
  if(getButtonState()==1){
 786:	57 dd       	rcall	.-1362   	; 0x236 <getButtonState()>
 788:	88 23       	and	r24, r24
 78a:	79 f0       	breq	.+30     	; 0x7aa <main+0x15a>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:292
    // button is not pressed
	stopMotor();
 78c:	28 dd       	rcall	.-1456   	; 0x1de <stopMotor()>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:301
	if(run_state!=1){
      batEmpty = startMotor();
	}
  }
  // If battery empty - stop the motor and hang the firmware
  if(batEmpty){
 78e:	8f e7       	ldi	r24, 0x7F	; 127
 790:	c8 16       	cp	r12, r24
 792:	86 e1       	ldi	r24, 0x16	; 22
 794:	d8 06       	cpc	r13, r24
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	e8 06       	cpc	r14, r24
 79a:	f1 04       	cpc	r15, r1
 79c:	08 f0       	brcs	.+2      	; 0x7a0 <main+0x150>
 79e:	9d cf       	rjmp	.-198    	; 0x6da <main+0x8a>
 7a0:	2d c0       	rjmp	.+90     	; 0x7fc <main+0x1ac>
main():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:114
// 4.2v - 100%

uint8_t getbatIndicatorVal(uint16_t rawadc){
  uint32_t adc128 = (uint32_t)rawadc * 128;
  if(adc128>=V1S6) return 6;
  if(adc128>=V1S5) return 5;
 7a2:	85 e0       	ldi	r24, 0x05	; 5
 7a4:	dd cf       	rjmp	.-70     	; 0x760 <main+0x110>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:117
  if(adc128>=V1S4) return 4;
  if(adc128>=V1S3) return 3;
  if(adc128>=V1S2) return 2;
 7a6:	82 e0       	ldi	r24, 0x02	; 2
 7a8:	db cf       	rjmp	.-74     	; 0x760 <main+0x110>
loop():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:296
    // button is not pressed
	stopMotor();
  } else {
    // button is pressed
    // shuld we initiate start process?
	if(run_state!=1){
 7aa:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <run_state>
 7ae:	81 30       	cpi	r24, 0x01	; 1
 7b0:	71 f3       	breq	.-36     	; 0x78e <main+0x13e>
startMotor():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:221
	  return res32 /32;
}

// start motor smoothly
bool startMotor(void){
  cli();
 7b2:	f8 94       	cli
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:222
  OCR1A = 75; // value to test
 7b4:	de bd       	out	0x2e, r29	; 46
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:223
  OCR1B = 255; // value to test	
 7b6:	1b bd       	out	0x2b, r17	; 43
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:224
  TCCR1 = (1<<CS13) | (1<<CS11) ; // Fast PWM mode (value 3)
 7b8:	00 bf       	out	0x30, r16	; 48
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:226
  //TCCR0B = (0<<WGM02) | (1<<CS02) | (0<<CS01) | (0<<CS00); // Speed (value 3)
  TIMSK |= (1<<OCIE1A) | (1<<OCIE1B) ;//(1<<TOIE1); // enable compare match and overflow interrupts
 7ba:	89 b7       	in	r24, 0x39	; 57
 7bc:	80 66       	ori	r24, 0x60	; 96
 7be:	89 bf       	out	0x39, r24	; 57
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:227
  sei();
 7c0:	78 94       	sei
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:228
  delay(30);
 7c2:	6e e1       	ldi	r22, 0x1E	; 30
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	9e dc       	rcall	.-1732   	; 0x108 <delay>
main():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:230
  //now motor starts at 50%. Increase the speed to 100%
  for(uint8_t i=80;i<190;i+=6){
 7cc:	c0 e5       	ldi	r28, 0x50	; 80
startMotor():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:231
    wdt_reset();
 7ce:	a8 95       	wdr
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:232
    OCR1A = i;
 7d0:	ce bd       	out	0x2e, r28	; 46
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:233
  	delay(25);
 7d2:	69 e1       	ldi	r22, 0x19	; 25
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	96 dc       	rcall	.-1748   	; 0x108 <delay>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:235
  	// check battery and button
  	uint16_t rawadc = readADC();
 7dc:	0d dd       	rcall	.-1510   	; 0x1f8 <readADC()>
isBatteryEmpty():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:100
	}
}
#endif

bool isBatteryEmpty(uint16_t rawadc){
  return ((uint32_t)rawadc*128 >= V1S0 ? LOW : HIGH);
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	a0 e0       	ldi	r26, 0x00	; 0
 7e2:	27 e0       	ldi	r18, 0x07	; 7
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	aa 1f       	adc	r26, r26
 7ea:	bb 1f       	adc	r27, r27
 7ec:	2a 95       	dec	r18
 7ee:	d1 f7       	brne	.-12     	; 0x7e4 <main+0x194>
startMotor():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:236
    wdt_reset();
    OCR1A = i;
  	delay(25);
  	// check battery and button
  	uint16_t rawadc = readADC();
    if(isBatteryEmpty(rawadc)){
 7f0:	8f 37       	cpi	r24, 0x7F	; 127
 7f2:	96 41       	sbci	r25, 0x16	; 22
 7f4:	a1 40       	sbci	r26, 0x01	; 1
 7f6:	b1 05       	cpc	r27, r1
 7f8:	28 f4       	brcc	.+10     	; 0x804 <main+0x1b4>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:237
		stopMotor();
 7fa:	f1 dc       	rcall	.-1566   	; 0x1de <stopMotor()>
loop():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:302
      batEmpty = startMotor();
	}
  }
  // If battery empty - stop the motor and hang the firmware
  if(batEmpty){
    stopMotor();
 7fc:	f0 dc       	rcall	.-1568   	; 0x1de <stopMotor()>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:303
    disableWatchdog();
 7fe:	12 dd       	rcall	.-1500   	; 0x224 <disableWatchdog()>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:306
	while(1==1){
#ifndef NOHANG
		bitClear(PORTB,3); // just to be 100% sure that motor will not start
 800:	c3 98       	cbi	0x18, 3	; 24
 802:	fe cf       	rjmp	.-4      	; 0x800 <main+0x1b0>
startMotor():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:240
  	uint16_t rawadc = readADC();
    if(isBatteryEmpty(rawadc)){
		stopMotor();
	    return HIGH; // exit with low bat indication
  	}
	if(getButtonState()==1){
 804:	18 dd       	rcall	.-1488   	; 0x236 <getButtonState()>
 806:	88 23       	and	r24, r24
 808:	11 f0       	breq	.+4      	; 0x80e <main+0x1be>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:242
		//button is released while starting motor
		stopMotor();
 80a:	e9 dc       	rcall	.-1582   	; 0x1de <stopMotor()>
 80c:	66 cf       	rjmp	.-308    	; 0x6da <main+0x8a>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:230
  //TCCR0B = (0<<WGM02) | (1<<CS02) | (0<<CS01) | (0<<CS00); // Speed (value 3)
  TIMSK |= (1<<OCIE1A) | (1<<OCIE1B) ;//(1<<TOIE1); // enable compare match and overflow interrupts
  sei();
  delay(30);
  //now motor starts at 50%. Increase the speed to 100%
  for(uint8_t i=80;i<190;i+=6){
 80e:	ca 5f       	subi	r28, 0xFA	; 250
 810:	c2 3c       	cpi	r28, 0xC2	; 194
 812:	e9 f6       	brne	.-70     	; 0x7ce <main+0x17e>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:247
		stopMotor();
	    return LOW; // exit
	}
  }
  // at the end run motor at full speed
  cli();
 814:	f8 94       	cli
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:248
  TCCR1 = 0; // stop timer
 816:	10 be       	out	0x30, r1	; 48
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:249
  sei();
 818:	78 94       	sei
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:250
  bitSet(PORTB, 3);
 81a:	c3 9a       	sbi	0x18, 3	; 24
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:251
  delay(5);
 81c:	65 e0       	ldi	r22, 0x05	; 5
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	71 dc       	rcall	.-1822   	; 0x108 <delay>
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:252
  bitSet(PORTB, 3); // make sure motor is on. can be done with resetting interrupts flags.
 826:	c3 9a       	sbi	0x18, 3	; 24
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:253
  run_state=1;
 828:	b0 92 a4 00 	sts	0x00A4, r11	; 0x8000a4 <run_state>
 82c:	56 cf       	rjmp	.-340    	; 0x6da <main+0x8a>

0000082e <_GLOBAL__sub_I_oled>:
_ZN5PrintC2Ev():
C:\Users\Pavel\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/Print.h:75
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 82e:	ec e8       	ldi	r30, 0x8C	; 140
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	13 82       	std	Z+3, r1	; 0x03
 834:	12 82       	std	Z+2, r1	; 0x02
__base_ctor ():
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:143
	ssd1306_send_byte(command6);
	ssd1306_send_byte(command7);
	ssd1306_send_stop();
}

SSD1306Device::SSD1306Device(void (*wireBeginFunc)(void), bool (*wireBeginTransmissionFunc)(void), bool (*wireWriteFunc)(uint8_t byte), uint8_t (*wireEndTransmissionFunc)(void)) {
 836:	84 e6       	ldi	r24, 0x64	; 100
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	91 83       	std	Z+1, r25	; 0x01
 83c:	80 83       	st	Z, r24
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:145
	wireBeginFn = wireBeginFunc;
	wireBeginTransmissionFn = wireBeginTransmissionFunc;
 83e:	8c e6       	ldi	r24, 0x6C	; 108
 840:	91 e0       	ldi	r25, 0x01	; 1
 842:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <wireBeginTransmissionFn+0x1>
 846:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <wireBeginTransmissionFn>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:146
	wireWriteFn = wireWriteFunc;
 84a:	8b e3       	ldi	r24, 0x3B	; 59
 84c:	91 e0       	ldi	r25, 0x01	; 1
 84e:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <wireWriteFn+0x1>
 852:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <wireWriteFn>
C:\Users\Pavel\Documents\Arduino\libraries\Tiny4kOLED\src/Tiny4kOLED.cpp:147
	wireEndTransmissionFn = wireEndTransmissionFunc;
 856:	8e e8       	ldi	r24, 0x8E	; 142
 858:	91 e0       	ldi	r25, 0x01	; 1
 85a:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <wireEndTransmissionFn+0x1>
 85e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <wireEndTransmissionFn>
_GLOBAL__sub_I_oled():
C:\src\Tennp\Git\ChainSawDIY\Firmware\diychainsaw/diychainsaw.ino:321
#endif
	}
#endif
  }

}
 862:	08 95       	ret

00000864 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 864:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 866:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 868:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 86a:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 86c:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 86e:	09 94       	ijmp

00000870 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 870:	f8 94       	cli

00000872 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 872:	ff cf       	rjmp	.-2      	; 0x872 <__stop_program>
